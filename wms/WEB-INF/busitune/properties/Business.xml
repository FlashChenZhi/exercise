<?xml version="1.0" encoding="utf-8"?>
<generator>

  <!-- 定数 -->
  <valiable name="PROGRESS_URI">/Progress.do</valiable>
  <valiable name="MSG_EXPORT_DATA_NOTFOUND">6003011</valiable>
  <valiable name="MSG_PRINT_SUCCESS">6001010</valiable>
  <valiable name="MSG_PRINT_FAILURE">6007034</valiable>
  <valiable name="MSG_EXPORT_CONFIRM">MSG-W0018</valiable>
  <valiable name="MSG_LISTBOX_DATA_NOT_FOUND">6003011</valiable>
  <valiable name="MSG_LISTBOX_MAXNUMBER_OF_DISPLAY">6001023</valiable>
  <valiable name="MSG_LISTBOX_DISPLAY">6001022</valiable>
  <valiable name="MSG_LISTCELL_NOT_SET">6003001</valiable>
  <valiable name="MSG_MAX_NUMBER_OF_XLS">6001031</valiable>

  <!-- 変数 -->
  <valiable name="imports" type="HashSet"/>
  <valiable name="fields" type="List"/>
  <valiable name="instanceVariables" type="List"/>
  <valiable name="publicMethods" type="List"/>
  <valiable name="preferenceMethods" type="List"/>
  <valiable name="privateMethods" type="List"/>
  <valiable name="dlgBackStatements" type="List"/>
  <valiable name="confirmBackStatements" type="List"/>
  <valiable name="pagerStatements" type="List"/>
  <valiable name="hasPager" test="/controls/control[@type='Pager']">true</valiable>
  <valiable name="sessionKeys" type="HashSet"/>
  <valiable name="popupSessionKey">_KEY_POPUPSOURCE</valiable>
  <valiable name="confirmSessionKey">_KEY_CONFIRMSOURCE</valiable>
  <valiable name="pagerSessionKey">_KEY_PAGERSOURCE</valiable>

  <!-- インポート -->
  <set name="imports" select="@superClass"/>

  <!-- DASCH名 -->
  <valiable name="daschSessionKey">
    <choose>
      <when test="/events/event//process[@pattern='PagerList' and @isSession='true' and @isPopup='true']">_KEY_DASCH_LIST</when>
      <otherwise>_KEY_DASCH</otherwise>
    </choose>
  </valiable>

  <!-- DASCHセッション利用か -->
  <valiable name="useDaschSession">
    <choose>
      <when test="not(/events/event//process[@pattern='PagerList'])">true</when>
      <when test="/events/event//process[@pattern='PagerList' and @isSession='true']">true</when>
    </choose>
  </valiable>

  <!-- プロセスメソッド作成 -->
  <foreach select="events/event//process">
    <call name="processStatement"/>
  </foreach>

  <!--
    イベントメソッド作成
    v1.2.1.3でのイベントの並びが page_Load、page_Initizeになっているため調整
  -->
  <call name="eventStatement" select="events/event[@name='page_Load']"/>
  <foreach select="events/event[@name!='page_Load']">
    <call name="eventStatement"/>
  </foreach>

  <!-- イベント（page_Load） -->
  <template name="eventStatement" match="event[@name='page_Load']">
    <set name="sessionKeys" select="$popupSessionKey"/>
    <set name="publicMethods">
      /**<br/>
       *<br/>
       * @param e ActionEvent<br/>
       * @throws Exception<br/>
       */<br/>
      public void page_Load(ActionEvent e)<br/>
              throws Exception<br/>
      {<br/>
          setTitle();<br/>
          <br/>
          // save a popup event source.<br/>
          viewState.setString(<valueof select="$popupSessionKey"/>, request.getParameter(<valueof select="$popupSessionKey"/>));<br/>
          <br/>
          // initialize pulldown models.<br/>
          initializePulldownModels();<br/>
          <!-- 条件ありを先に出力 -->
          <foreach select="process[condition]">
            <br/>
            <call name="blockStatement" select="condition/block[@type='If']"/>
                <call name="processCallStatement"/>
                return;<br/>
            }<br/>
          </foreach>
          <!-- 条件なしを後に出力 -->
          <foreach select="process[not(condition)]">
            <br/>
            <call name="processCallStatement"/>
          </foreach>
      }<br/>
      <br/>
    </set>
  </template>

  <!-- イベント（page_Initialize） -->
  <template name="eventStatement" match="event[@name='page_Initialize']">
    <set name="publicMethods">
      /**<br/>
       *<br/>
       * @param e ActionEvent<br/>
       * @throws Exception<br/>
       */<br/>
      public void page_Initialize(ActionEvent e)<br/>
              throws Exception<br/>
      {<br/>
          // initialize components.<br/>
          initializeComponents();<br/>
          <!-- 条件ありを先に出力 -->
          <foreach select="process[condition]">
            <br/>
            <call name="blockStatement" select="condition/block[@type='If']"/>
                <call name="processCallStatement"/>
                return;<br/>
            }<br/>
          </foreach>
          <!-- 条件なしを後に出力 -->
          <foreach select="process[not(condition)]">
            <br/>
            <call name="processCallStatement"/>
          </foreach>
      }<br/>
      <br/>
    </set>
  </template>

  <!-- イベント（page_ConfirmBack） -->
  <template name="eventStatement" match="event[@name='page_ConfirmBack']">
    <set name="sessionKeys" test="$confirmBackStatements" select="$confirmSessionKey"/>
    <set name="publicMethods" test="$confirmBackStatements">
      /**<br/>
       *<br/>
       * @param e ActionEvent<br/>
       * @throws Exception<br/>
       */<br/>
      public void page_ConfirmBack(ActionEvent e)<br/>
              throws Exception<br/>
      {<br/>
          // get event source.<br/>
          String eventSource = viewState.getString(<valueof select="$confirmSessionKey"/>);<br/>
          if (eventSource == null)<br/>
          {<br/>
              return;<br/>
          }<br/>
          <br/>
          // remove event source.<br/>
          viewState.remove(<valueof select="$confirmSessionKey"/>);<br/>
          <br/>
          // check result.<br/>
          boolean isExecute = new Boolean(String.valueOf(e.getEventArgs().get(0))).booleanValue();<br/>
          if (!isExecute)<br/>
          {<br/>
              return;<br/>
          }<br/>
          <br/>
          // choose process.<br/>
          <foreach select="$confirmBackStatements">
            <if test="position()&gt;1">else </if><valueof trim="true"/>
          </foreach>
      }<br/>
      <br/>
    </set>
  </template>

  <!-- イベント（page_DlgBack） -->
  <template name="eventStatement" match="event[@name='page_DlgBack']">
    <set name="sessionKeys" test="$dlgBackStatements" select="$popupSessionKey"/>
    <set name="publicMethods" test="$dlgBackStatements">
      /**<br/>
       *<br/>
       * @param e ActionEvent<br/>
       * @throws Exception<br/>
       */<br/>
      public void page_DlgBack(ActionEvent e)<br/>
              throws Exception<br/>
      {<br/>
          // get event source.<br/>
          DialogParameters dialogParams = ((DialogEvent)e).getDialogParameters();<br/>
          String eventSource = dialogParams.getParameter(<valueof select="$popupSessionKey"/>);<br/>
          if (StringUtil.isBlank(eventSource))<br/>
          {<br/>
              return;<br/>
          }<br/>
          <br/>
          // choose process.<br/>
          <foreach select="$dlgBackStatements">
            <if test="position()&gt;1">else </if><valueof trim="true"/>
          </foreach>
      }<br/>
      <br/>
    </set>
  </template>

  <!-- イベント（btn_ToMenu_Click）-->
  <template name="eventStatement" match="event[@name='btn_ToMenu_Click']">
    <!-- v1.2.1.3 互換 -->
  </template>

  <!-- イベント（リストセル）-->
  <template name="eventStatement" match="event[@controlType='ListCell' or @controlType='FixedListCell' or @controlType='ScrollListCell' or @controlType='MultiroleListCell']">
    <set name="publicMethods" test=".//process">
      /**<br/>
       *<br/>
       * @param e ActionEvent<br/>
       * @throws Exception<br/>
       */<br/>
      public void <valueof select="@name"/>(ActionEvent e)<br/>
              throws Exception<br/>
      {<br/>
          <!-- 列単位に分岐 -->
          <if test="column">
            // get event source column.<br/>
            int activeCol = <valueof select="@control"/>.getActiveCol();<br/>
            <br/>
            // choose process.<br/>
            <foreach select="column">
              <if test="position()&gt;1">else </if>if (_lcm_<valueof select="../@control"/>.getColumnIndex(KEY_<valueof select="@name"/>) == activeCol)<br/>
              {<br/>
                  <!-- 条件ありを先に出力 -->
                  <foreach select="process[condition]">
                    <br/>
                    <call name="blockStatement" select="condition/block[@type='If']"/>
                        <call name="processCallStatement"/>
                        return;<br/>
                    }<br/>
                  </foreach>
                  <!-- 条件なしを後に出力 -->
                  <foreach select="process[not(condition)]">
                    <br/>
                    <call name="processCallStatement"/>
                  </foreach>
              }<br/>
            </foreach>
          </if>
      }<br/>
      <br/>
    </set>
  </template>

  <!-- イベント（ページャー）-->
  <template name="eventStatement" match="event[@controlType='Pager']">
    <set name="publicMethods" test="$pagerStatements">
      /**<br/>
       *<br/>
       * @param e ActionEvent<br/>
       * @throws Exception<br/>
       */<br/>
      public void <valueof select="@name"/>(ActionEvent e)<br/>
              throws Exception<br/>
      {<br/>
          <choose>
            <when test="ends-with(@name, 'First')">
              _pager.first();<br/>
            </when>
            <when test="ends-with(@name, 'Prev')">
              _pager.previous();<br/>
            </when>
            <when test="ends-with(@name, 'Next')">
              _pager.next();<br/>
            </when>
            <when test="ends-with(@name, 'Last')">
              _pager.last();<br/>
            </when>
          </choose>
          pager_SetPage();<br/>
      }<br/>
      <br/>
    </set>
  </template>

  <!-- イベント（その他）-->
  <template name="eventStatement">
    <set name="publicMethods" test=".//process">
      /**<br/>
       *<br/>
       * @param e ActionEvent<br/>
       * @throws Exception<br/>
       */<br/>
      public void <valueof select="@name"/>(ActionEvent e)<br/>
              throws Exception<br/>
      {<br/>
          <!-- 条件ありを先に出力 -->
          <foreach select="process[condition]">
            <br/>
            <call name="blockStatement" select="condition/block[@type='If']"/>
                <call name="processCallStatement"/>
                return;<br/>
            }<br/>
          </foreach>
          <!-- 条件なしを後に出力 -->
          <foreach select="process[not(condition)]">
            <br/>
            <call name="processCallStatement"/>
          </foreach>
      }<br/>
      <br/>
    </set>
  </template>

  <!-- 入出力パターン（フォーカス/クリア/一覧クリア/全選択/全選択解除）-->
  <template name="processCallStatement" match="process[@pattern='Focus' or @pattern='Clear' or @pattern='ListCellClear' or @pattern='AllChecked' or @pattern='AllUnChecked']">
    // process call.<br/>
    <valueof select="@name"/>();<br/>
  </template>

  <template name="processStatement" match="process[@pattern='Focus' or @pattern='Clear' or @pattern='ListCellClear' or @pattern='AllChecked' or @pattern='AllUnChecked']">
    <set name="privateMethods">
        /**<br/>
         *<br/>
         * @throws Exception<br/>
         */<br/>
        private void <valueof select="@name"/>()<br/>
                throws Exception<br/>
        {<br/>
            <call name="validateStatement"/>
            <call name="clearStatement" select="clear1"/>
            <call name="focusStatement"/>
        }<br/>
        <br/>
    </set>
  </template>

  <!-- 入出力パターン（画面出力）-->
  <template name="processCallStatement" match="process[@pattern='DisplayInput']">
    // process call.<br/>
    <valueof select="@name"/>();<br/>
  </template>

  <template name="processStatement" match="process[@pattern='DisplayInput']">
    <set name="privateMethods">
        /**<br/>
         *<br/>
         * @throws Exception<br/>
         */<br/>
        private void <valueof select="@name"/>()<br/>
                throws Exception<br/>
        {<br/>
            <if test="@column='true'">
              // get active row.<br/>
              int row = <valueof select="@parent"/>.getActiveRow();<br/>
              ListCellLine line = _lcm_<valueof select="@parent"/>.get(row);<br/>
              <br/>
            </if>
            <call name="validateStatement"/>
            <if test="output1">
              // output display.<br/>
              <valiable name="businessParams" select="output1//*[@type='BusinessParams']/@typeName"/>
              <if test="$businessParams">
                <set name="imports" select="$businessParams"/>
                <valueof select="class-name($businessParams)"/> requestParam = new <valueof select="class-name($businessParams)"/>(request);<br/>
              </if>
              <call name="mappingStatement" select="output1">
                <convert select="$businessParams">requestParam</convert>
                <convert select="@parent">line</convert>
              </call>
              <valiable name="listCell" select="output1//set[@column='true']/@parent"/>
              <if test="$listCell">
                <valueof select="$listCell"/>_SetLineToolTip(line);<br/>
                _lcm_<valueof select="$listCell"/>.set(row, line);<br/>
              </if>
              <br/>
            </if>
            <call name="clearStatement" select="clear1"/>
            <call name="focusStatement"/>
        }<br/>
        <br/>
    </set>
  </template>

  <!-- 入出力パターン（画面遷移（条件チェックあり））-->
  <template name="processCallStatement" match="process[@pattern='Forward']">
    // process call.<br/>
    <valueof select="@name"/>();<br/>
  </template>

  <template name="processStatement" match="process[@pattern='Forward']">
    <set name="imports" select="@sch"/>
    <set name="imports" select="@schParams"/>
    <set name="privateMethods">
        /**<br/>
         *<br/>
         * @throws Exception<br/>
         */<br/>
        private void <valueof select="@name"/>()<br/>
                throws Exception<br/>
        {<br/>
            <call name="validateStatement"/>
            <call name="localeStatement"/>
            Connection conn = null;<br/>
            <valueof select="class-name(@sch)"/> sch = null;<br/>
            try<br/>
            {<br/>
                // open connection.<br/>
                conn = ConnectionManager.getRequestConnection(this);<br/>
                sch = new <valueof select="class-name(@sch)"/>(conn, this.getClass(), locale, ui);<br/>
                <br/>
                // set input parameters.<br/>
                <valueof select="class-name(@schParams)"/> inparam = new <valueof select="class-name(@schParams)"/>();<br/>
                <if test="input1">
                  <call name="mappingStatement" select="input1">
                    <convert select="@schParams">inparam</convert>
                  </call>
                </if>
                <br/>
                // SCH call.<br/>
                if (!sch.nextCheck(inparam))<br/>
                {<br/>
                    message.setMsgResourceKey(sch.getMessage());<br/>
                    return;<br/>
                }<br/>
                <br/>
                <if test="output1">
                  // set ViewState parameters.<br/>
                  <call name="mappingStatement" select="output1"/>
                  <br/>
                </if>
                // forward.<br/>
                forward("<valueof select="@uri"/>.do");<br/>
            }<br/>
            catch (Exception ex)<br/>
            {<br/>
                ex.printStackTrace();<br/>
                message.setMsgResourceKey(ExceptionHandler.getDisplayMessage(ex, this));<br/>
            }<br/>
            finally<br/>
            {<br/>
                DBUtil.close(conn);<br/>
            }<br/>
        }<br/>
        <br/>
    </set>
  </template>

  <!-- 入出力パターン（画面遷移（条件チェックなし））-->
  <template name="processCallStatement" match="process[@pattern='ForwardNonCheck']">
    // process call.<br/>
    <valueof select="@name"/>();<br/>
  </template>

  <template name="processStatement" match="process[@pattern='ForwardNonCheck']">
    <set name="privateMethods">
        /**<br/>
         *<br/>
         * @throws Exception<br/>
         */<br/>
        private void <valueof select="@name"/>()<br/>
                throws Exception<br/>
        {<br/>
            <call name="validateStatement"/>
            try<br/>
            {<br/>
                <if test="output1">
                  // set ViewState parameters.<br/>
                  <call name="mappingStatement" select="output1"/>
                  <br/>
                </if>
                // forward.<br/>
                forward("<valueof select="@uri"/>.do");<br/>
            }<br/>
            catch (Exception ex)<br/>
            {<br/>
                ex.printStackTrace();<br/>
                message.setMsgResourceKey(ExceptionHandler.getDisplayMessage(ex, this));<br/>
            }<br/>
        }<br/>
        <br/>
    </set>
  </template>

  <!-- 入出力パターン（ポップアップ）-->
  <template name="processCallStatement" match="process[@pattern='Popup']">
    // process call.<br/>
    <valueof select="@name"/>();<br/>
  </template>

  <template name="processStatement" match="process[@pattern='Popup']">
    <set name="sessionKeys" select="$popupSessionKey"/>
    <set name="dlgBackStatements">
      if (eventSource.equals("<valueof select="@name"/>"))<br/>
      {<br/>
          // process call.<br/>
          <valueof select="@name"/>_DlgBack(dialogParams);<br/>
      }<br/>
    </set>
    <set name="privateMethods">
        /**<br/>
         *<br/>
         * @throws Exception<br/>
         */<br/>
        private void <valueof select="@name"/>()<br/>
                throws Exception<br/>
        {<br/>
            <call name="validateStatement"/>
            <if test="input1">
              // dialog parameters set.<br/>
              <valueof select="class-name(@businessParams)"/> inparam = new <valueof select="class-name(@businessParams)"/>();<br/>
              <set name="imports" select="@businessParams"/>
              <call name="mappingStatement" select="input1">
                <convert select="@businessParams">inparam</convert>
              </call>
              <br/>
            </if>
            // show dialog.<br/>
            <choose>
              <when test="input1">
                ForwardParameters forwardParam = inparam.toForwardParameters();<br/>
              </when>
              <otherwise>
                ForwardParameters forwardParam = new ForwardParameters();<br/>
              </otherwise>
            </choose>
            forwardParam.setParameter(<valueof select="$popupSessionKey"/>, "<valueof select="@name"/>");<br/>
            redirect("<valueof select="@uri"/>.do", forwardParam<if test="$PROGRESS_URI">, "<valueof select="$PROGRESS_URI"/>"</if>);<br/>
        }<br/>
        <br/>
    </set>
    <set name="privateMethods">
        /**<br/>
         *<br/>
         * @param dialogParams DialogParameters<br/>
         * @throws Exception<br/>
         */<br/>
        private void <valueof select="@name"/>_DlgBack(DialogParameters dialogParams)<br/>
                throws Exception<br/>
        {<br/>
            <if test="output1">
              // output display.<br/>
              <valiable name="businessParams" select="output1//*[@type='BusinessParams']/@typeName"/>
              <if test="$businessParams">
                <valueof select="class-name($businessParams)"/> outparam = new <valueof select="class-name($businessParams)"/>(dialogParams);<br/>
                <set name="imports" select="@businessParams"/>
              </if>
              <call name="mappingStatement" select="output1">
                <convert select="$businessParams">outparam</convert>
              </call>
              <br/>
            </if>
            <call name="clearStatement" select="clear1"/>
            <call name="focusStatement"/>
        }<br/>
        <br/>
    </set>
  </template>

  <!-- 入出力パターン（親画面遷移）-->
  <template name="processCallStatement" match="process[@pattern='ParentRedirect']">
    // process call.<br/>
    <valueof select="@name"/>();<br/>
  </template>

  <template name="processStatement" match="process[@pattern='ParentRedirect']">
    <set name="sessionKeys" select="$popupSessionKey"/>
    <set name="privateMethods">
        /**<br/>
         *<br/>
         * @throws Exception<br/>
         */<br/>
        private void <valueof select="@name"/>()<br/>
                throws Exception<br/>
        {<br/>
            <if test="@column='true'">
              // get active row.<br/>
              int row = <valueof select="@parent"/>.getActiveRow();<br/>
              ListCellLine line = _lcm_<valueof select="@parent"/>.get(row);<br/>
              <br/>
            </if>
            <call name="validateStatement"/>
            <if test="output1">
              // output parameter.<br/>
              <valiable name="businessParams" select="output1//*[@type='BusinessParams']/@typeName"/>
              <if test="$businessParams">
                <set name="imports" select="$businessParams"/>
                <valueof select="class-name($businessParams)"/> outparam = new <valueof select="class-name($businessParams)"/>();<br/>
              </if>
              <call name="mappingStatement" select="output1">
                <convert select="$businessParams">outparam</convert>
                <convert select="@parent">line</convert>
              </call>
              <br/>
              ForwardParameters forwardParam = outparam.toForwardParameters();<br/>
              forwardParam.setParameter(<valueof select="$popupSessionKey"/>, viewState.getString(<valueof select="$popupSessionKey"/>));<br/>
              parentRedirect(forwardParam);<br/>
              dispose();<br/>
              <br/>
            </if>
            <if test="not(output1)">
              parentRedirect(null);<br/>
              dispose();<br/>
              <br/>
            </if>
            <call name="clearStatement" select="clear1"/>
        }<br/>
        <br/>
    </set>
  </template>

  <!-- 入出力パターン（登録）-->
  <template name="processCallStatement" match="process[@pattern='Regist']">
    // process call.<br/>
    <valueof select="@name"/>();<br/>
  </template>

  <template name="processStatement" match="process[@pattern='Regist']">
    <set name="imports">jp.co.daifuku.foundation.common.ScheduleParams.ProcessFlag</set>
    <set name="imports" select="@sch"/>
    <set name="imports" select="@schParams"/>
    <set name="privateMethods">
        /**<br/>
         *<br/>
         * @throws Exception<br/>
         */<br/>
        private void <valueof select="@name"/>()<br/>
                throws Exception<br/>
        {<br/>
            <call name="validateStatement"/>
            <call name="localeStatement"/>
            Connection conn = null;<br/>
            <valueof select="class-name(@sch)"/> sch = null;<br/>
            try<br/>
            {<br/>
                // open connection.<br/>
                conn = ConnectionManager.getRequestConnection(this);<br/>
                sch = new <valueof select="class-name(@sch)"/>(conn, this.getClass(), locale, ui);<br/>
                <br/>
                // set input parameters.<br/>
                <valueof select="class-name(@schParams)"/> inparam = new <valueof select="class-name(@schParams)"/>();<br/>
                inparam.setProcessFlag(ProcessFlag.REGIST);<br/>
                <if test="input1">
                  <call name="mappingStatement" select="input1">
                    <convert select="@schParams">inparam</convert>
                  </call>
                </if>
                <br/>
                // SCH call.<br/>
                if (!sch.startSCH(inparam))<br/>
                {<br/>
                    // rollback.<br/>
                    conn.rollback();<br/>
                    message.setMsgResourceKey(sch.getMessage());<br/>
                    return;<br/>
                }<br/>
                <br/>
                <call name="part11Statement"/>
                // commit.<br/>
                conn.commit();<br/>
                message.setMsgResourceKey(sch.getMessage());<br/>
                <br/>
                <if test="output1">
                  // output display.<br/>
                  <call name="mappingStatement" select="output1"/>
                  <br/>
                </if>
                <call name="clearStatement" select="clear1"/>
                <call name="focusStatement"/>
            }<br/>
            catch (Exception ex)<br/>
            {<br/>
                ex.printStackTrace();<br/>
                message.setMsgResourceKey(ExceptionHandler.getDisplayMessage(ex, this));<br/>
            }<br/>
            finally<br/>
            {<br/>
                DBUtil.rollback(conn);<br/>
                DBUtil.close(conn);<br/>
            }<br/>
        }<br/>
        <br/>
    </set>
  </template>

  <!-- 入出力パターン（修正登録）-->
  <template name="processCallStatement" match="process[@pattern='Edit']">
    // process call.<br/>
    <valueof select="@name"/>(true);<br/>
  </template>

  <template name="processStatement" match="process[@pattern='Edit']">
    <set name="imports">jp.co.daifuku.foundation.common.Params</set>
    <set name="imports">jp.co.daifuku.foundation.common.ScheduleParams.ProcessFlag</set>
    <set name="imports" select="@sch"/>
    <set name="imports" select="@schParams"/>
    <set name="sessionKeys" select="$confirmSessionKey"/>
    <set name="confirmBackStatements">
      if (eventSource.equals("<valueof select="@name"/>"))<br/>
      {<br/>
          // process call.<br/>
          <valueof select="@name"/>(false);<br/>
      }<br/>
    </set>
    <set name="privateMethods">
        /**<br/>
         *<br/>
         * @param confirm<br/>
         * @throws Exception<br/>
         */<br/>
        private void <valueof select="@name"/>(boolean confirm)<br/>
                throws Exception<br/>
        {<br/>
            <call name="validateStatement"/>
            <call name="localeStatement"/>
            Connection conn = null;<br/>
            <valueof select="class-name(@sch)"/> sch = null;<br/>
            try<br/>
            {<br/>
                // open connection.<br/>
                conn = ConnectionManager.getRequestConnection(this);<br/>
                sch = new <valueof select="class-name(@sch)"/>(conn, this.getClass(), locale, ui);<br/>
                <br/>
                // set input parameters.<br/>
                <valueof select="class-name(@schParams)"/> inparam = new <valueof select="class-name(@schParams)"/>();<br/>
                inparam.setProcessFlag(ProcessFlag.UPDATE);<br/>
                <if test="input1">
                  <call name="mappingStatement" select="input1">
                    <convert select="@schParams">inparam</convert>
                  </call>
                </if>
                <br/>
                // SCH call.<br/>
                if (confirm &amp;&amp; !sch.check(inparam))<br/>
                {<br/>
                    if (StringUtil.isBlank(sch.getDispMessage()))<br/>
                    {<br/>
                        // show message.<br/>
                        message.setMsgResourceKey(sch.getMessage());<br/>
                        return;<br/>
                    }<br/>
                    else<br/>
                    {<br/>
                        // show confirm message.<br/>
                        this.setConfirm(sch.getDispMessage(), false, true);<br/>
                        viewState.setString(<valueof select="$confirmSessionKey"/>, "<valueof select="@name"/>");<br/>
                        return;<br/>
                    }<br/>
                }<br/>
                <br/>
                // SCH call.<br/>
                if (!sch.startSCH(inparam))<br/>
                {<br/>
                    // rollback.<br/>
                    conn.rollback();<br/>
                    message.setMsgResourceKey(sch.getMessage());<br/>
                    return;<br/>
                }<br/>
                <br/>
                <call name="part11Statement"/>
                // commit.<br/>
                conn.commit();<br/>
                message.setMsgResourceKey(sch.getMessage());<br/>
                <br/>
                // set input parameters.<br/>
                inparam = new <valueof select="class-name(@schParams)"/>();<br/>
                <if test="input2">
                  <call name="mappingStatement" select="input2">
                    <convert select="@schParams">inparam</convert>
                  </call>
                </if>
                <br/>
                // SCH call.<br/>
                List&lt;Params&gt; outparams = sch.query(inparam);<br/>
                <br/>
                if (outparams.size() == 0)<br/>
                {<br/>
                    <call name="clearStatement" select="clear2"/>
                    return;<br/>
                }<br/>
                <br/>
                // output display.<br/>
                for (Params outparam : outparams)<br/>
                {<br/>
                    <if test="output1">
                      <call name="mappingStatement" select="output1">
                        <convert select="@schParams">outparam</convert>
                      </call>
                    </if>
                }<br/>
                <br/>
                <call name="clearStatement" select="clear1"/>
                <call name="focusStatement"/>
            }<br/>
            catch (Exception ex)<br/>
            {<br/>
                ex.printStackTrace();<br/>
                message.setMsgResourceKey(ExceptionHandler.getDisplayMessage(ex, this));<br/>
            }<br/>
            finally<br/>
            {<br/>
                DBUtil.rollback(conn);<br/>
                DBUtil.close(conn);<br/>
            }<br/>
        }<br/>
        <br/>
    </set>
  </template>

  <!-- 入出力パターン（削除）-->
  <template name="processCallStatement" match="process[@pattern='Delete']">
    // process call.<br/>
    <valueof select="@name"/>(true);<br/>
  </template>

  <template name="processStatement" match="process[@pattern='Delete']">
    <set name="imports">jp.co.daifuku.foundation.common.ScheduleParams.ProcessFlag</set>
    <set name="imports" select="@sch"/>
    <set name="imports" select="@schParams"/>
    <set name="sessionKeys" select="$confirmSessionKey"/>
    <set name="confirmBackStatements">
      if (eventSource.equals("<valueof select="@name"/>"))<br/>
      {<br/>
          // process call.<br/>
          <valueof select="@name"/>(false);<br/>
      }<br/>
    </set>
    <set name="privateMethods">
        /**<br/>
         *<br/>
         * @param confirm<br/>
         * @throws Exception<br/>
         */<br/>
        private void <valueof select="@name"/>(boolean confirm)<br/>
                throws Exception<br/>
        {<br/>
            <call name="validateStatement"/>
            <call name="localeStatement"/>
            Connection conn = null;<br/>
            <valueof select="class-name(@sch)"/> sch = null;<br/>
            try<br/>
            {<br/>
                // open connection.<br/>
                conn = ConnectionManager.getRequestConnection(this);<br/>
                sch = new <valueof select="class-name(@sch)"/>(conn, this.getClass(), locale, ui);<br/>
                <br/>
                // set input parameters.<br/>
                <valueof select="class-name(@schParams)"/> inparam = new <valueof select="class-name(@schParams)"/>();<br/>
                inparam.setProcessFlag(ProcessFlag.DELETE);<br/>
                <if test="input1">
                  <call name="mappingStatement" select="input1">
                    <convert select="@schParams">inparam</convert>
                  </call>
                </if>
                <br/>
                // SCH call.<br/>
                if (confirm &amp;&amp; !sch.check(inparam))<br/>
                {<br/>
                    if (StringUtil.isBlank(sch.getDispMessage()))<br/>
                    {<br/>
                        // show message.<br/>
                        message.setMsgResourceKey(sch.getMessage());<br/>
                        return;<br/>
                    }<br/>
                    else<br/>
                    {<br/>
                        // show confirm message.<br/>
                        this.setConfirm(sch.getDispMessage(), false, true);<br/>
                        viewState.setString(<valueof select="$confirmSessionKey"/>, "<valueof select="@name"/>");<br/>
                        return;<br/>
                    }<br/>
                }<br/>
                <br/>
                // SCH call.<br/>
                if (!sch.startSCH(inparam))<br/>
                {<br/>
                    // rollback.<br/>
                    conn.rollback();<br/>
                    message.setMsgResourceKey(sch.getMessage());<br/>
                    return;<br/>
                }<br/>
                <br/>
                <call name="part11Statement"/>
                // commit.<br/>
                conn.commit();<br/>
                message.setMsgResourceKey(sch.getMessage());<br/>
                <br/>
                <if test="output1">
                  // output display.<br/>
                  <call name="mappingStatement" select="output1"/>
                  <br/>
                </if>
                <call name="clearStatement" select="clear1"/>
                <call name="focusStatement"/>
            }<br/>
            catch (Exception ex)<br/>
            {<br/>
                ex.printStackTrace();<br/>
                message.setMsgResourceKey(ExceptionHandler.getDisplayMessage(ex, this));<br/>
            }<br/>
            finally<br/>
            {<br/>
                DBUtil.rollback(conn);<br/>
                DBUtil.close(conn);<br/>
            }<br/>
        }<br/>
        <br/>
    </set>
  </template>

  <!-- 入出力パターン（入力（ためうち））-->
  <template name="processCallStatement" match="process[@pattern='ListCellInput']">
    // process call.<br/>
    <valueof select="@name"/>(true);<br/>
  </template>

  <template name="processStatement" match="process[@pattern='ListCellInput']">
    <set name="imports">jp.co.daifuku.foundation.common.Params</set>
    <set name="imports">jp.co.daifuku.foundation.common.ScheduleParams</set>
    <set name="imports">jp.co.daifuku.foundation.common.ScheduleParams.ProcessFlag</set>
    <set name="imports" select="@sch"/>
    <set name="imports" select="@schParams"/>
    <set name="sessionKeys" select="$confirmSessionKey"/>
    <set name="confirmBackStatements">
      if (eventSource.equals("<valueof select="@name"/>"))<br/>
      {<br/>
          // process call.<br/>
          <valueof select="@name"/>(false);<br/>
      }<br/>
    </set>
    <set name="privateMethods">
        /**<br/>
         *<br/>
         * @param confirm<br/>
         * @throws Exception<br/>
         */<br/>
        private void <valueof select="@name"/>(boolean confirm)<br/>
                throws Exception<br/>
        {<br/>
            <call name="validateStatement"/>
            <call name="localeStatement"/>
            Connection conn = null;<br/>
            <valueof select="class-name(@sch)"/> sch = null;<br/>
            try<br/>
            {<br/>
                // open connection.<br/>
                conn = ConnectionManager.getRequestConnection(this);<br/>
                sch = new <valueof select="class-name(@sch)"/>(conn, this.getClass(), locale, ui);<br/>
                <br/>
                // set input parameters.<br/>
                <valueof select="class-name(@schParams)"/> inparam = new <valueof select="class-name(@schParams)"/>();<br/>
                <if test="input1">
                  <call name="mappingStatement" select="input1">
                    <convert select="@schParams">inparam</convert>
                  </call>
                </if>
                <br/>
                // set input parameters.<br/>
                List&lt;ScheduleParams&gt; inparamList = new ArrayList&lt;ScheduleParams&gt;();<br/>
                <valiable name="listCell" select="input2//*[@column='true']/@parent"/>
                <if test="input2 and $listCell">
                  for (int i = 1; i &lt;= _lcm_<valueof select="$listCell"/>.size(); i++)<br/>
                  {<br/>
                      // exclusion editing row.<br/>
                      if (_lcm_<valueof select="$listCell"/>.getEditRow() == i)<br/>
                      {<br/>
                          continue;<br/>
                      }<br/>
                      <br/>
                      ListCellLine line = _lcm_<valueof select="$listCell"/>.get(i);<br/>
                      <valueof select="class-name(@schParams)"/> lineparam = new <valueof select="class-name(@schParams)"/>();<br/>
                      lineparam.setProcessFlag(ProcessFlag.INPUT);<br/>
                      lineparam.setRowIndex(i);<br/>
                      <call name="mappingStatement" select="input2">
                        <convert select="@schParams">lineparam</convert>
                        <convert select="$listCell">line</convert>
                      </call>
                      inparamList.add(lineparam);<br/>
                  }<br/>
                </if>
                <br/>
                ScheduleParams[] inparams = new ScheduleParams[inparamList.size()];<br/>
                inparamList.toArray(inparams);<br/>
                <br/>
                // SCH call.<br/>
                if (confirm &amp;&amp; !sch.check(inparam, inparams))<br/>
                {<br/>
                    if (StringUtil.isBlank(sch.getDispMessage()))<br/>
                    {<br/>
                        // show message.<br/>
                        message.setMsgResourceKey(sch.getMessage());<br/>
                        return;<br/>
                    }<br/>
                    else<br/>
                    {<br/>
                        // show confirm message.<br/>
                        this.setConfirm(sch.getDispMessage(), false, true);<br/>
                        viewState.setString(<valueof select="$confirmSessionKey"/>, "<valueof select="@name"/>");<br/>
                        return;<br/>
                    }<br/>
                }<br/>
                <br/>
                message.setMsgResourceKey(sch.getMessage());<br/>
                <br/>
                <choose>
                  <when test="output1//*[@type='SchParams']">
                    <set name="listCell" select="output1//*[@column='true']/@parent"/>
                    // SCH call.<br/>
                    List&lt;Params&gt; outparams = sch.query(inparam);<br/>
                    <br/><br/>
                    // output display.<br/>
                    for (Params outparam : outparams)<br/>
                    {<br/>
                        <if test="$listCell">
                          int editRow = _lcm_<valueof select="$listCell"/>.getEditRow();<br/>
                          boolean newline = ListCellModel.EDIT_ROW_NONE == editRow;<br/>
                          ListCellLine line = newline ? _lcm_<valueof select="$listCell"/>.getNewLine()<br/>
                                                      : _lcm_<valueof select="$listCell"/>.get(editRow);<br/>
                        </if>
                        <call name="mappingStatement" select="output1">
                          <convert select="@schParams">outparam</convert>
                          <convert select="$listCell">line</convert>
                        </call>
                        <if test="$listCell">
                          <br/>
                          // add new row or update editing row.<br/>
                          <valueof select="$listCell"/>_SetLineToolTip(line);<br/>
                          if (newline)<br/>
                          {<br/>
                              _lcm_<valueof select="$listCell"/>.add(line, true);<br/>
                          }<br/>
                          else<br/>
                          {<br/>
                              _lcm_<valueof select="$listCell"/>.set(editRow, line);<br/>
                          }<br/>
                        </if>
                        break;<br/>
                    }<br/>
                    <br/>
                    <if test="$listCell">
                      // reset editing row.<br/>
                      _lcm_<valueof select="$listCell"/>.resetEditRow();<br/>
                      _lcm_<valueof select="$listCell"/>.resetHighlight();<br/>
                      <br/>
                    </if>
                  </when>
                  <when test="output1">
                    <set name="listCell" select="output1//*[@column='true']/@parent"/>
                    // output display.<br/>
                    <if test="$listCell">
                      int editRow = _lcm_<valueof select="$listCell"/>.getEditRow();<br/>
                      boolean newline = ListCellModel.EDIT_ROW_NONE == editRow;<br/>
                      ListCellLine line = newline ? _lcm_<valueof select="$listCell"/>.getNewLine()<br/>
                                                  : _lcm_<valueof select="$listCell"/>.get(editRow);<br/>
                    </if>
                    <call name="mappingStatement" select="output1">
                      <convert select="$listCell">line</convert>
                    </call>
                    <br/>
                    <if test="$listCell">
                      // add new row or update editing row.<br/>
                      <valueof select="$listCell"/>_SetLineToolTip(line);<br/>
                      if (newline)<br/>
                      {<br/>
                          _lcm_<valueof select="$listCell"/>.add(line, true);<br/>
                      }<br/>
                      else<br/>
                      {<br/>
                          _lcm_<valueof select="$listCell"/>.set(editRow, line);<br/>
                      }<br/>
                      <br/>
                      // reset editing row.<br/>
                      _lcm_<valueof select="$listCell"/>.resetEditRow();<br/>
                      _lcm_<valueof select="$listCell"/>.resetHighlight();<br/>
                      <br/>
                    </if>
                  </when>
                </choose>
                <call name="clearStatement" select="clear1"/>
                <call name="focusStatement"/>
            }<br/>
            catch (Exception ex)<br/>
            {<br/>
                ex.printStackTrace();<br/>
                message.setMsgResourceKey(ExceptionHandler.getDisplayMessage(ex, this));<br/>
            }<br/>
            finally<br/>
            {<br/>
                DBUtil.close(conn);<br/>
            }<br/>
        }<br/>
        <br/>
    </set>
  </template>

  <!-- 入出力パターン（登録（ためうち））-->
  <template name="processCallStatement" match="process[@pattern='ListCellRegist']">
    // process call.<br/>
    <valueof select="@name"/>();<br/>
  </template>

  <template name="processStatement" match="process[@pattern='ListCellRegist']">
    <set name="imports">jp.co.daifuku.foundation.common.ScheduleParams</set>
    <set name="imports">jp.co.daifuku.foundation.common.ScheduleParams.ProcessFlag</set>
    <set name="imports" select="@sch"/>
    <set name="imports" select="@schParams"/>
    <set name="privateMethods">
        /**<br/>
         *<br/>
         * @throws Exception<br/>
         */<br/>
        private void <valueof select="@name"/>()<br/>
                throws Exception<br/>
        {<br/>
            <call name="validateStatement"/>
            <call name="localeStatement"/>
            Connection conn = null;<br/>
            <valueof select="class-name(@sch)"/> sch = null;<br/>
            try<br/>
            {<br/>
                // open connection.<br/>
                conn = ConnectionManager.getRequestConnection(this);<br/>
                sch = new <valueof select="class-name(@sch)"/>(conn, this.getClass(), locale, ui);<br/>
                <br/>
                // set input parameters.<br/>
                List&lt;ScheduleParams&gt; inparamList = new ArrayList&lt;ScheduleParams&gt;();<br/>
                <valiable name="listCell" select="input1//*[@column='true']/@parent"/>
                <if test="input1 and $listCell">
                  for (int i = 1; i &lt;= _lcm_<valueof select="$listCell"/>.size(); i++)<br/>
                  {<br/>
                      // exclusion unmodified row.<br/>
                      ListCellLine line = _lcm_<valueof select="$listCell"/>.get(i);<br/>
                      if (!(line.isAppend() || line.isEdited()))<br/>
                      {<br/>
                          continue;<br/>
                      }<br/>
                      <br/>
                      <valueof select="class-name(@schParams)"/> lineparam = new <valueof select="class-name(@schParams)"/>();<br/>
                      lineparam.setProcessFlag(ProcessFlag.REGIST);<br/>
                      lineparam.setRowIndex(i);<br/>
                      <call name="mappingStatement" select="input1">
                        <convert select="@schParams">lineparam</convert>
                        <convert select="$listCell">line</convert>
                      </call>
                      inparamList.add(lineparam);<br/>
                  }<br/>
                </if>
                <br/>
                ScheduleParams[] inparams = new ScheduleParams[inparamList.size()];<br/>
                inparamList.toArray(inparams);<br/>
                <br/>
                // SCH call.<br/>
                if (!sch.startSCH(inparams))<br/>
                {<br/>
                    // rollback.<br/>
                    conn.rollback();<br/>
                    message.setMsgResourceKey(sch.getMessage());<br/>
                    <if test="$listCell">
                      <br/>
                      // reset editing row or highlighting error row.<br/>
                      _lcm_<valueof select="$listCell"/>.resetEditRow();<br/>
                      _lcm_<valueof select="$listCell"/>.resetHighlight();<br/>
                      _lcm_<valueof select="$listCell"/>.addHighlight(sch.getErrorRowIndex(), ControlColor.Warning);<br/>
                    </if>
                    return;<br/>
                }<br/>
                <br/>
                <call name="part11Statement"/>
                // commit.<br/>
                conn.commit();<br/>
                message.setMsgResourceKey(sch.getMessage());<br/>
                <br/>
                <if test="$listCell">
                  // reset editing row.<br/>
                  _lcm_<valueof select="$listCell"/>.resetEditRow();<br/>
                  _lcm_<valueof select="$listCell"/>.resetHighlight();<br/>
                  <br/>
                </if>
                <if test="output1">
                  // output display.<br/>
                  <call name="mappingStatement" select="output1">
                    <convert select="$listCell">line</convert>
                  </call>
                  <br/>
                </if>
                <call name="clearStatement" select="clear1"/>
                <call name="focusStatement"/>
            }<br/>
            catch (Exception ex)<br/>
            {<br/>
                ex.printStackTrace();<br/>
                message.setMsgResourceKey(ExceptionHandler.getDisplayMessage(ex, this));<br/>
            }<br/>
            finally<br/>
            {<br/>
                DBUtil.rollback(conn);<br/>
                DBUtil.close(conn);<br/>
            }<br/>
        }<br/>
        <br/>
    </set>
  </template>

  <!-- 入出力パターン（登録（startSCHGetParams））-->
  <template name="processCallStatement" match="process[@pattern='RegistGetParams']">
    // process call.<br/>
    <valueof select="@name"/>();<br/>
  </template>

  <template name="processStatement" match="process[@pattern='RegistGetParams']">
    <set name="imports">jp.co.daifuku.foundation.common.Params</set>
    <set name="imports">jp.co.daifuku.foundation.common.ScheduleParams</set>
    <set name="imports">jp.co.daifuku.foundation.common.ScheduleParams.ProcessFlag</set>
    <set name="imports" select="@sch"/>
    <set name="imports" select="@schParams"/>
    <set name="privateMethods">
        /**<br/>
         *<br/>
         * @throws Exception<br/>
         */<br/>
        private void <valueof select="@name"/>()<br/>
                throws Exception<br/>
        {<br/>
            <call name="validateStatement"/>
            <call name="localeStatement"/>
            Connection conn = null;<br/>
            <valueof select="class-name(@sch)"/> sch = null;<br/>
            try<br/>
            {<br/>
                // open connection.<br/>
                conn = ConnectionManager.getRequestConnection(this);<br/>
                sch = new <valueof select="class-name(@sch)"/>(conn, this.getClass(), locale, ui);<br/>
                <br/>
                // set input parameters.<br/>
                List&lt;ScheduleParams&gt; inparamList = new ArrayList&lt;ScheduleParams&gt;();<br/>
                <valiable name="listCell" select="input1//*[@column='true']/@parent"/>
                <if test="input1 and $listCell">
                  for (int i = 1; i &lt;= _lcm_<valueof select="$listCell"/>.size(); i++)<br/>
                  {<br/>
                      // exclusion unmodified row.<br/>
                      ListCellLine line = _lcm_<valueof select="$listCell"/>.get(i);<br/>
                      if (!(line.isAppend() || line.isEdited()))<br/>
                      {<br/>
                          continue;<br/>
                      }<br/>
                      <br/>
                      <valueof select="class-name(@schParams)"/> lineparam = new <valueof select="class-name(@schParams)"/>();<br/>
                      lineparam.setProcessFlag(ProcessFlag.REGIST);<br/>
                      lineparam.setRowIndex(i);<br/>
                      <call name="mappingStatement" select="input1">
                        <convert select="@schParams">lineparam</convert>
                        <convert select="$listCell">line</convert>
                      </call>
                      inparamList.add(lineparam);<br/>
                  }<br/>
                </if>
                <br/>
                ScheduleParams[] inparams = new ScheduleParams[inparamList.size()];<br/>
                inparamList.toArray(inparams);<br/>
                <br/>
                // SCH call.<br/>
                List&lt;Params&gt; outparams = sch.startSCHgetParams(inparams);<br/>
                <br/>
                if (outparams == null)<br/>
                {<br/>
                    // rollback.<br/>
                    conn.rollback();<br/>
                    message.setMsgResourceKey(sch.getMessage());<br/>
                    <if test="$listCell">
                      <br/>
                      // reset editing row or highlighting error row.<br/>
                      _lcm_<valueof select="$listCell"/>.resetEditRow();<br/>
                      _lcm_<valueof select="$listCell"/>.resetHighlight();<br/>
                      _lcm_<valueof select="$listCell"/>.addHighlight(sch.getErrorRowIndex(), ControlColor.Warning);<br/>
                    </if>
                    return;<br/>
                }<br/>
                <br/>
                <call name="part11Statement"/>
                // commit.<br/>
                conn.commit();<br/>
                message.setMsgResourceKey(sch.getMessage());<br/>
                <br/>
                <if test="output1">
                  <valiable name="outListCell" select="output1//*[@column='true']/@parent"/>
                  // output display.<br/>
                  <if test="$outListCell">
                    _lcm_<valueof select="$outListCell"/>.clear();<br/>
                  </if>
                  for (Params outparam : outparams)<br/>
                  {<br/>
                      <if test="$outListCell">
                        ListCellLine line = _lcm_<valueof select="$outListCell"/>.getNewLine();<br/>
                      </if>
                      <call name="mappingStatement" select="output1">
                        <convert select="@schParams">outparam</convert>
                        <convert select="$outListCell">line</convert>
                      </call>
                      <if test="$outListCell">
                        <valueof select="$outListCell"/>_SetLineToolTip(line);<br/>
                        _lcm_<valueof select="$outListCell"/>.add(line);<br/>
                      </if>
                  }<br/>
                  <br/>
                </if>
                <if test="$listCell">
                  // reset editing row.<br/>
                  _lcm_<valueof select="$listCell"/>.resetEditRow();<br/>
                  _lcm_<valueof select="$listCell"/>.resetHighlight();<br/>
                  <br/>
                </if>
                <call name="clearStatement" select="clear1"/>
                <call name="focusStatement"/>
            }<br/>
            catch (Exception ex)<br/>
            {<br/>
                ex.printStackTrace();<br/>
                message.setMsgResourceKey(ExceptionHandler.getDisplayMessage(ex, this));<br/>
            }<br/>
            finally<br/>
            {<br/>
                DBUtil.rollback(conn);<br/>
                DBUtil.close(conn);<br/>
            }<br/>
        }<br/>
        <br/>
    </set>
  </template>

  <!-- 入出力パターン（修正登録（ためうち）＋SCH検索）-->
  <template name="processCallStatement" match="process[@pattern='ListCellEdit']">
    // process call.<br/>
    <valueof select="@name"/>();<br/>
  </template>

  <template name="processStatement" match="process[@pattern='ListCellEdit']">
    <set name="imports">jp.co.daifuku.foundation.common.Params</set>
    <set name="imports">jp.co.daifuku.foundation.common.ScheduleParams</set>
    <set name="imports">jp.co.daifuku.foundation.common.ScheduleParams.ProcessFlag</set>
    <set name="imports" select="@sch"/>
    <set name="imports" select="@schParams"/>
    <set name="privateMethods">
        /**<br/>
         *<br/>
         * @throws Exception<br/>
         */<br/>
        private void <valueof select="@name"/>()<br/>
                throws Exception<br/>
        {<br/>
            <call name="validateStatement"/>
            <call name="localeStatement"/>
            Connection conn = null;<br/>
            <valueof select="class-name(@sch)"/> sch = null;<br/>
            try<br/>
            {<br/>
                // open connection.<br/>
                conn = ConnectionManager.getRequestConnection(this);<br/>
                sch = new <valueof select="class-name(@sch)"/>(conn, this.getClass(), locale, ui);<br/>
                <br/>
                // set input parameters.<br/>
                List&lt;ScheduleParams&gt; inparamList = new ArrayList&lt;ScheduleParams&gt;();<br/>
                <valiable name="listCell" select="input1//*[@column='true']/@parent"/>
                <if test="input1 and $listCell">
                  for (int i = 1; i &lt;= _lcm_<valueof select="$listCell"/>.size(); i++)<br/>
                  {<br/>
                      // exclusion unmodified row.<br/>
                      ListCellLine line = _lcm_<valueof select="$listCell"/>.get(i);<br/>
                      if (!(line.isAppend() || line.isEdited()))<br/>
                      {<br/>
                          continue;<br/>
                      }<br/>
                      <br/>
                      <valueof select="class-name(@schParams)"/> lineparam = new <valueof select="class-name(@schParams)"/>();<br/>
                      lineparam.setProcessFlag(ProcessFlag.UPDATE);<br/>
                      lineparam.setRowIndex(i);<br/>
                      <call name="mappingStatement" select="input1">
                        <convert select="@schParams">lineparam</convert>
                        <convert select="$listCell">line</convert>
                      </call>
                      inparamList.add(lineparam);<br/>
                  }<br/>
                </if>
                <br/>
                ScheduleParams[] inparams = new ScheduleParams[inparamList.size()];<br/>
                inparamList.toArray(inparams);<br/>
                <br/>
                // SCH call.<br/>
                if (!sch.startSCH(inparams))<br/>
                {<br/>
                    // rollback.<br/>
                    conn.rollback();<br/>
                    message.setMsgResourceKey(sch.getMessage());<br/>
                    <if test="$listCell">
                      <br/>
                      // reset editing row or highlighting error row.<br/>
                      _lcm_<valueof select="$listCell"/>.resetEditRow();<br/>
                      _lcm_<valueof select="$listCell"/>.resetHighlight();<br/>
                      _lcm_<valueof select="$listCell"/>.addHighlight(sch.getErrorRowIndex(), ControlColor.Warning);<br/>
                    </if>
                    return;<br/>
                }<br/>
                <br/>
                <call name="part11Statement"/>
                // commit.<br/>
                conn.commit();<br/>
                message.setMsgResourceKey(sch.getMessage());<br/>
                <br/>
                <if test="$listCell">
                  // reset editing row.<br/>
                  _lcm_<valueof select="$listCell"/>.resetEditRow();<br/>
                  _lcm_<valueof select="$listCell"/>.resetHighlight();<br/>
                  <br/>
                </if>
                // set input parameters.<br/>
                <valueof select="class-name(@schParams)"/> inparam = new <valueof select="class-name(@schParams)"/>();<br/>
                <if test="input2">
                  <call name="mappingStatement" select="input2">
                    <convert select="@schParams">inparam</convert>
                  </call>
                </if>
                <br/>
                // SCH call.<br/>
                List&lt;Params&gt; outparams = sch.query(inparam);<br/>
                <set name="listCell" select="output1//*[@column='true']/@parent"/>
                <if test="$listCell">
                  _lcm_<valueof select="$listCell"/>.clear();<br/>
                </if>
                <br/>
                if (outparams.size() == 0)<br/>
                {<br/>
                    <call name="clearStatement" select="clear2"/>
                    return;<br/>
                }<br/>
                <br/>
                <if test="output1">
                  // output display.<br/>
                  for (Params outparam : outparams)<br/>
                  {<br/>
                      <if test="$listCell">
                        ListCellLine line = _lcm_<valueof select="$listCell"/>.getNewLine();<br/>
                      </if>
                      <call name="mappingStatement" select="output1">
                        <convert select="@schParams">outparam</convert>
                        <convert select="$listCell">line</convert>
                      </call>
                      <if test="$listCell">
                        <valueof select="$listCell"/>_SetLineToolTip(line);<br/>
                        _lcm_<valueof select="$listCell"/>.add(line);<br/>
                      </if>
                  }<br/>
                  <br/>
                </if>
                <call name="clearStatement" select="clear1"/>
                <call name="focusStatement"/>
            }<br/>
            catch (Exception ex)<br/>
            {<br/>
                ex.printStackTrace();<br/>
                message.setMsgResourceKey(ExceptionHandler.getDisplayMessage(ex, this));<br/>
            }<br/>
            finally<br/>
            {<br/>
                DBUtil.rollback(conn);<br/>
                DBUtil.close(conn);<br/>
            }<br/>
        }<br/>
        <br/>
    </set>
  </template>

  <!-- 入出力パターン（全削除（ためうち））-->
  <template name="processCallStatement" match="process[@pattern='ListCellDelete']">
    // process call.<br/>
    <valueof select="@name"/>();<br/>
  </template>

  <template name="processStatement" match="process[@pattern='ListCellDelete']">
    <set name="imports">jp.co.daifuku.foundation.common.ScheduleParams</set>
    <set name="imports">jp.co.daifuku.foundation.common.ScheduleParams.ProcessFlag</set>
    <set name="imports" select="@sch"/>
    <set name="imports" select="@schParams"/>
    <set name="privateMethods">
        /**<br/>
         *<br/>
         * @throws Exception<br/>
         */<br/>
        private void <valueof select="@name"/>()<br/>
                throws Exception<br/>
        {<br/>
            <call name="validateStatement"/>
            <call name="localeStatement"/>
            Connection conn = null;<br/>
            <valueof select="class-name(@sch)"/> sch = null;<br/>
            try<br/>
            {<br/>
                // open connection.<br/>
                conn = ConnectionManager.getRequestConnection(this);<br/>
                sch = new <valueof select="class-name(@sch)"/>(conn, this.getClass(), locale, ui);<br/>
                <br/>
                // set input parameters.<br/>
                List&lt;ScheduleParams&gt; inparamList = new ArrayList&lt;ScheduleParams&gt;();<br/>
                <valiable name="listCell" select="input1//*[@column='true']/@parent"/>
                <if test="input1 and $listCell">
                  for (int i = 1; i &lt;= _lcm_<valueof select="$listCell"/>.size(); i++)<br/>
                  {<br/>
                      ListCellLine line = _lcm_<valueof select="$listCell"/>.get(i);<br/>
                      <valueof select="class-name(@schParams)"/> lineparam = new <valueof select="class-name(@schParams)"/>();<br/>
                      lineparam.setProcessFlag(ProcessFlag.DELETE_ALL);<br/>
                      lineparam.setRowIndex(i);<br/>
                      <call name="mappingStatement" select="input1">
                        <convert select="@schParams">lineparam</convert>
                        <convert select="$listCell">line</convert>
                      </call>
                      inparamList.add(lineparam);<br/>
                  }<br/>
                </if>
                <br/>
                ScheduleParams[] inparams = new ScheduleParams[inparamList.size()];<br/>
                inparamList.toArray(inparams);<br/>
                <br/>
                // SCH call.<br/>
                if (!sch.startSCH(inparams))<br/>
                {<br/>
                    // rollback.<br/>
                    conn.rollback();<br/>
                    message.setMsgResourceKey(sch.getMessage());<br/>
                    <if test="$listCell">
                      <br/>
                      // reset editing row or highlighting error row.<br/>
                      _lcm_<valueof select="$listCell"/>.resetEditRow();<br/>
                      _lcm_<valueof select="$listCell"/>.resetHighlight();<br/>
                      _lcm_<valueof select="$listCell"/>.addHighlight(sch.getErrorRowIndex(), ControlColor.Warning);<br/>
                    </if>
                    return;<br/>
                }<br/>
                <br/>
                <call name="part11Statement"/>
                // commit.<br/>
                conn.commit();<br/>
                message.setMsgResourceKey(sch.getMessage());<br/>
                <br/>
                <if test="$listCell">
                  // reset editing row.<br/>
                  _lcm_<valueof select="$listCell"/>.resetEditRow();<br/>
                  _lcm_<valueof select="$listCell"/>.resetHighlight();<br/>
                  <br/>
                </if>
                <if test="output1">
                  // output display.<br/>
                  <call name="mappingStatement" select="output1">
                    <convert select="$listCell">line</convert>
                  </call>
                  <br/>
                </if>
                <call name="clearStatement" select="clear1"/>
                <call name="focusStatement"/>
            }<br/>
            catch (Exception ex)<br/>
            {<br/>
                ex.printStackTrace();<br/>
                message.setMsgResourceKey(ExceptionHandler.getDisplayMessage(ex, this));<br/>
            }<br/>
            finally<br/>
            {<br/>
                DBUtil.rollback(conn);<br/>
                DBUtil.close(conn);<br/>
            }<br/>
        }<br/>
        <br/>
    </set>
  </template>

  <!-- 入出力パターン（行削除）-->
  <template name="processCallStatement" match="process[@pattern='ListCellRowDelete']">
    // process call.<br/>
    <valueof select="@name"/>();<br/>
  </template>

  <template name="processStatement" match="process[@pattern='ListCellRowDelete']">
    <set name="imports">jp.co.daifuku.foundation.common.ScheduleParams.ProcessFlag</set>
    <set name="imports" select="@sch"/>
    <set name="imports" select="@schParams"/>
    <set name="privateMethods">
        /**<br/>
         *<br/>
         * @throws Exception<br/>
         */<br/>
        private void <valueof select="@name"/>()<br/>
                throws Exception<br/>
        {<br/>
            <valiable name="listCell" select="@parent"/>
            // get active row.<br/>
            int row = <valueof select="$listCell"/>.getActiveRow();<br/>
            ListCellLine line = _lcm_<valueof select="$listCell"/>.get(row);<br/>
            <br/>
            <call name="validateStatement"/>
            <call name="localeStatement"/>
            Connection conn = null;<br/>
            <valueof select="class-name(@sch)"/> sch = null;<br/>
            try<br/>
            {<br/>
                // open connection.<br/>
                conn = ConnectionManager.getRequestConnection(this);<br/>
                sch = new <valueof select="class-name(@sch)"/>(conn, this.getClass(), locale, ui);<br/>
                <br/>
                // set input parameters.<br/>
                <valueof select="class-name(@schParams)"/> inparam = new <valueof select="class-name(@schParams)"/>();<br/>
                inparam.setProcessFlag(ProcessFlag.DELETE);<br/>
                inparam.setRowIndex(row);<br/>
                <if test="input1">
                  <call name="mappingStatement" select="input1">
                    <convert select="@schParams">inparam</convert>
                    <convert select="$listCell">line</convert>
                  </call>
                </if>
                <br/>
                // SCH call.<br/>
                if (!sch.check(inparam))<br/>
                {<br/>
                    message.setMsgResourceKey(sch.getMessage());<br/>
                    return;<br/>
                }<br/>
                <br/>
                // SCH call.<br/>
                if (!sch.startSCH(inparam))<br/>
                {<br/>
                    // rollback.<br/>
                    conn.rollback();<br/>
                    message.setMsgResourceKey(sch.getMessage());<br/>
                    <br/>
                    // reset editing row or highlighting error row.<br/>
                    _lcm_<valueof select="$listCell"/>.resetEditRow();<br/>
                    _lcm_<valueof select="$listCell"/>.resetHighlight();<br/>
                    _lcm_<valueof select="$listCell"/>.addHighlight(sch.getErrorRowIndex(), ControlColor.Warning);<br/>
                    return;<br/>
                }<br/>
                <br/>
                <call name="part11Statement"/>
                // commit.<br/>
                conn.commit();<br/>
                message.setMsgResourceKey(sch.getMessage());<br/>
                <br/>
                // reset editing row.<br/>
                _lcm_<valueof select="$listCell"/>.remove(row);<br/>
                _lcm_<valueof select="$listCell"/>.resetEditRow();<br/>
                _lcm_<valueof select="$listCell"/>.resetHighlight();<br/>
                <br/>
                <call name="clearStatement" select="clear1"/>
                <call name="focusStatement"/>
            }<br/>
            catch (Exception ex)<br/>
            {<br/>
                ex.printStackTrace();<br/>
                message.setMsgResourceKey(ExceptionHandler.getDisplayMessage(ex, this));<br/>
            }<br/>
            finally<br/>
            {<br/>
                DBUtil.rollback(conn);<br/>
                DBUtil.close(conn);<br/>
            }<br/>
        }<br/>
        <br/>
    </set>
  </template>

  <!-- 入出力パターン（行修正）-->
  <template name="processCallStatement" match="process[@pattern='ListCellRowEdit']">
    // process call.<br/>
    <valueof select="@name"/>();<br/>
  </template>

  <template name="processStatement" match="process[@pattern='ListCellRowEdit']">
    <set name="privateMethods">
        /**<br/>
         *<br/>
         * @throws Exception<br/>
         */<br/>
        private void <valueof select="@name"/>()<br/>
                throws Exception<br/>
        {<br/>
            <valiable name="listCell" select="@parent"/>
            // get active row.<br/>
            int row = <valueof select="$listCell"/>.getActiveRow();<br/>
            ListCellLine line = _lcm_<valueof select="$listCell"/>.get(row);<br/>
            <br/>
            <call name="validateStatement"/>
            <if test="output1">
              // output display.<br/>
              <call name="mappingStatement" select="output1">
                <convert select="$listCell">line</convert>
              </call>
              <valiable name="outListCell" select="output1//set[@column='true']/@parent"/>
              <if test="$outListCell">
                <valueof select="$outListCell"/>_SetLineToolTip(line);<br/>
                _lcm_<valueof select="$outListCell"/>.set(row, line);<br/>
              </if>
              <br/>
            </if>
            // highlight active row.<br/>
            _lcm_<valueof select="$listCell"/>.resetHighlight();<br/>
            _lcm_<valueof select="$listCell"/>.addHighlight(row);<br/>
            _lcm_<valueof select="$listCell"/>.setEditRow(row);<br/>
            <br/>
            <call name="clearStatement" select="clear1"/>
            <call name="focusStatement"/>
        }<br/>
        <br/>
    </set>
  </template>

  <!-- 入出力パターン（行取消）-->
  <template name="processCallStatement" match="process[@pattern='ListCellRowReset']">
    // process call.<br/>
    <valueof select="@name"/>();<br/>
  </template>

  <template name="processStatement" match="process[@pattern='ListCellRowReset']">
    <set name="privateMethods">
        /**<br/>
         *<br/>
         * @throws Exception<br/>
         */<br/>
        private void <valueof select="@name"/>()<br/>
                throws Exception<br/>
        {<br/>
            <valiable name="listCell" select="@parent"/>
            // get active row.<br/>
            int row = <valueof select="$listCell"/>.getActiveRow();<br/>
            <br/>
            // reset editing row.<br/>
            _lcm_<valueof select="$listCell"/>.remove(row);<br/>
            _lcm_<valueof select="$listCell"/>.resetEditRow();<br/>
            _lcm_<valueof select="$listCell"/>.resetHighlight();<br/>
            <br/>
            <call name="clearStatement" select="clear1"/>
            <call name="focusStatement"/>
        }<br/>
        <br/>
    </set>
  </template>

  <!-- 入出力パターン（エクスポート）-->
  <template name="processCallStatement" match="process[@pattern='Export']">
    <!-- 入力1にリストセルが存在する場合は確認メッセージを無効に -->
    <valiable name="confirm" select="@confirm"/>
    <set name="confirm" test="input1//get[@column='true']">false</set>
    <choose>
      <when test="$confirm='true'">
        // process call.<br/>
        <valueof select="@name"/>(true);<br/>
      </when>
      <otherwise>
        // process call.<br/>
        <valueof select="@name"/>();<br/>
      </otherwise>
    </choose>
  </template>

  <template name="processStatement" match="process[@pattern='Export']">
    <set name="imports">jp.co.daifuku.foundation.common.Params</set>
    <set name="imports">jp.co.daifuku.foundation.da.ExporterFactory</set>
    <set name="imports" test="@print='true'">jp.co.daifuku.foundation.print.PrintExporter</set>
    <set name="imports" test="@print!='true'">jp.co.daifuku.foundation.da.Exporter</set>
    <set name="imports" test="@redirectExportFile='true'">java.io.File</set>
    <set name="imports" select="@dasch"/>
    <set name="imports" select="@daschParams"/>
    <set name="imports" select="@exporterClass"/>
    <set name="imports" select="@exportParams"/>
    <!-- 入力1にリストセルが存在する場合は確認メッセージを無効に -->
    <valiable name="confirm" select="@confirm"/>
    <valiable name="listCell" select="input1//get[@column='true']/@parent"/>
    <set name="confirm" test="$listCell">false</set>
    <if test="$confirm='true'">
      <set name="sessionKeys" select="$confirmSessionKey"/>
      <set name="confirmBackStatements">
        if (eventSource.equals("<valueof select="@name"/>"))<br/>
        {<br/>
            // process call.<br/>
            <valueof select="@name"/>(false);<br/>
        }<br/>
      </set>
    </if>
    <choose>
      <!-- 入力１にリストセルが存在する場合 -->
      <when test="$listCell">
        <set name="privateMethods">
          /**<br/>
           *<br/>
           * @throws Exception<br/>
           */<br/>
          private void <valueof select="@name"/>()<br/>
                  throws Exception<br/>
          {<br/>
              <call name="validateStatement"/>
              <call name="localeStatement"/>
              Connection conn = null;<br/>
              <valueof select="class-name(@dasch)"/> dasch = null;<br/>
              <choose>
                <when test="@print='true'">PrintExporter exporter = null;<br/></when>
                <otherwise>Exporter exporter = null;<br/></otherwise>
              </choose>
              <if test="@redirectExportFile='true'">
                File downloadFile = null;<br/>
              </if>
              try<br/>
              {<br/>
                  // open connection.<br/>
                  conn = ConnectionManager.getRequestConnection(this);<br/>
                  dasch = new <valueof select="class-name(@dasch)"/>(conn, this.getClass(), locale, ui);<br/>
                  dasch.setForwardOnly(true);<br/>
                  <br/>
                  <if test="input1">
                    main: for (int i = 1; i &lt;= _lcm_<valueof select="$listCell"/>.size(); i++)<br/>
                    {<br/>
                        // exclusion unmodified row.<br/>
                        ListCellLine line = _lcm_<valueof select="$listCell"/>.get(i);<br/>
                        if (!(line.isAppend() || line.isEdited()))<br/>
                        {<br/>
                            continue;<br/>
                        }<br/>
                        <br/>
                        // set input parameters.<br/>
                        <valueof select="class-name(@daschParams)"/> inparam = new <valueof select="class-name(@daschParams)"/>();<br/>
                        <call name="mappingStatement" select="input1">
                          <convert select="@daschParams">inparam</convert>
                          <convert select="$listCell">line</convert>
                        </call>
                        <br/>
                        // check count.<br/>
                        int count = dasch.count(inparam);<br/>
                        if (count == 0)<br/>
                        {<br/>
                            message.setMsgResourceKey("<valueof select="$MSG_EXPORT_DATA_NOTFOUND"/>");<br/>
                            return;<br/>
                        }<br/>
                        <br/>
                        // DASCH call.<br/>
                        dasch.search(inparam);<br/>
                        <br/>
                        // open exporter.<br/>
                        if (exporter == null)<br/>
                        {<br/>
                            ExporterFactory factory = new <valueof select="class-name(@exporterClass)"/>(locale, ui);<br/>
                            exporter = factory.<valueof select="@exporterMethod"/>("<valueof select="@exportName"/>"<if test="@exporterParameters!=''">, <valueof select="@exporterParameters"/></if>);<br/>
                            <choose>
                              <when test="@redirectExportFile='true'">downloadFile = exporter.open();<br/></when>
                              <otherwise>exporter.open();<br/></otherwise>
                            </choose>
                        }<br/>
                        <br/>
                        // export.<br/>
                        while (dasch.next())<br/>
                        {<br/>
                            Params outparam = dasch.get();<br/>
                            <valueof select="class-name(@exportParams)"/> expparam = new <valueof select="class-name(@exportParams)"/>();<br/>
                            <if test="output1">
                              <call name="mappingStatement" select="output1">
                                <convert select="@daschParams">outparam</convert>
                                <convert select="@exportParams">expparam</convert>
                                <convert select="$listCell">line</convert>
                              </call>
                            </if>
                            if (!exporter.write(expparam))<br/>
                            {<br/>
                                <if test="@exporter='Excel'">
                                  <set name="imports">jp.co.daifuku.common.CommonParam</set>
                                  message.setMsgResourceKey("<valueof select="$MSG_MAX_NUMBER_OF_XLS"/>\t"<br/>
                                          + Formatter.getNumFormat(count)<br/>
                                          + "\t"<br/>
                                          + Formatter.getNumFormat(CommonParam.getIntParam("MAX_NUMBER_OF_XLS")<br/>
                                          - exporter.getHeaderRowsCount()));<br/>
                                </if>
                                break main;<br/>
                            }<br/>
                        }<br/>
                    }<br/>
                    <br/>
                  </if>
                  <if test="@print='true'">
                    // execute print.<br/>
                    try<br/>
                    {<br/>
                        <choose>
                          <when test="@redirectExportFile='true'">
                            downloadFile = exporter.print();<br/>
                          </when>
                          <otherwise>
                            exporter.print();<br/>
                            message.setMsgResourceKey("<valueof select="$MSG_PRINT_SUCCESS"/>");<br/>
                          </otherwise>
                        </choose>
                    }<br/>
                    catch (Exception ex)<br/>
                    {<br/>
                        ex.printStackTrace();<br/>
                        message.setMsgResourceKey("<valueof select="$MSG_PRINT_FAILURE"/>");<br/>
                        return;<br/>
                    }<br/>
                    <br/>
                  </if>
                  <if test="part11">
                    <call name="part11Statement"/>
                    // commit.<br/>
                    conn.commit();<br/>
                    <br/>
                  </if>
                  <call name="clearStatement" select="clear1"/>
                  <call name="focusStatement"/>
                  <if test="@redirectExportFile='true'">
                    // redirect.<br/>
                    <valueof select="@redirectMethod"/>(downloadFile.getPath());<br/>
                    <if test="@exporter='Preview'">
                      <br/>
                      setFocus(null);<br/>
                    </if>
                  </if>
              }<br/>
              catch (Exception ex)<br/>
              {<br/>
                  ex.printStackTrace();<br/>
                  message.setMsgResourceKey(ExceptionHandler.getDisplayMessage(ex, this));<br/>
              }<br/>
              finally<br/>
              {<br/>
                  if (dasch != null)<br/>
                  {<br/>
                      dasch.close();<br/>
                  }<br/>
                  if (exporter != null)<br/>
                  {<br/>
                      exporter.close();<br/>
                  }<br/>
                  DBUtil.rollback(conn);<br/>
                  DBUtil.close(conn);<br/>
              }<br/>
          }<br/>
          <br/>
        </set>
      </when>
      <!-- 入力１にリストセルが存在しない場合 -->
      <otherwise>
        <set name="imports">jp.co.daifuku.bluedog.util.Formatter</set>
        <set name="privateMethods">
          <choose>
            <when test="$confirm='true'">
              /**<br/>
               *<br/>
               * @param confirm<br/>
               * @throws Exception<br/>
               */<br/>
              private void <valueof select="@name"/>(boolean confirm)<br/>
                      throws Exception<br/>
            </when>
            <otherwise>
              /**<br/>
               *<br/>
               * @throws Exception<br/>
               */<br/>
              private void <valueof select="@name"/>()<br/>
                      throws Exception<br/>
            </otherwise>
          </choose>
          {<br/>
              <call name="validateStatement"/>
              <call name="localeStatement"/>
              Connection conn = null;<br/>
              <valueof select="class-name(@dasch)"/> dasch = null;<br/>
              <choose>
                <when test="@print='true'">PrintExporter exporter = null;<br/></when>
                <otherwise>Exporter exporter = null;<br/></otherwise>
              </choose>
              try<br/>
              {<br/>
                  // open connection.<br/>
                  conn = ConnectionManager.getRequestConnection(this);<br/>
                  dasch = new <valueof select="class-name(@dasch)"/>(conn, this.getClass(), locale, ui);<br/>
                  dasch.setForwardOnly(true);<br/>
                  <br/>
                  <if test="input1">
                    // set input parameters.<br/>
                    <valueof select="class-name(@daschParams)"/> inparam = new <valueof select="class-name(@daschParams)"/>();<br/>
                    <call name="mappingStatement" select="input1">
                      <convert select="@daschParams">inparam</convert>
                    </call>
                    <br/>
                  </if>
                  // check count.<br/>
                  int count = dasch.count(inparam);<br/>
                  <choose>
                    <when test="$confirm='true'">
                      if (confirm &amp;&amp; count > 0)<br/>
                      {<br/>
                          // show confirm message.<br/>
                          this.setConfirm("<valueof select="$MSG_EXPORT_CONFIRM"/>\t" + Formatter.getNumFormat(count), false, true);<br/>
                          viewState.setString(<valueof select="$confirmSessionKey"/>, "<valueof select="@name"/>");<br/>
                          return;<br/>
                      }<br/>
                      else if (count == 0)<br/>
                      {<br/>
                          message.setMsgResourceKey("<valueof select="$MSG_EXPORT_DATA_NOTFOUND"/>");<br/>
                          return;<br/>
                      }<br/>
                    </when>
                    <otherwise>
                      if (count == 0)<br/>
                      {<br/>
                          message.setMsgResourceKey("<valueof select="$MSG_EXPORT_DATA_NOTFOUND"/>");<br/>
                          return;<br/>
                      }<br/>
                    </otherwise>
                  </choose>
                  <br/>
                  // DASCH call.<br/>
                  dasch.search(inparam);<br/>
                  <br/>
                  // open exporter.<br/>
                  ExporterFactory factory = new <valueof select="class-name(@exporterClass)"/>(locale, ui);<br/>
                  exporter = factory.<valueof select="@exporterMethod"/>("<valueof select="@exportName"/>"<if test="@exporterParameters!=''">, <valueof select="@exporterParameters"/></if>);<br/>
                  <choose>
                    <when test="@redirectExportFile='true'">File downloadFile = exporter.open();<br/></when>
                    <otherwise>exporter.open();<br/></otherwise>
                  </choose>
                  <br/>
                  // export.<br/>
                  while (dasch.next())<br/>
                  {<br/>
                      Params outparam = dasch.get();<br/>
                      <valueof select="class-name(@exportParams)"/> expparam = new <valueof select="class-name(@exportParams)"/>();<br/>
                      <if test="output1">
                        <call name="mappingStatement" select="output1">
                          <convert select="@daschParams">outparam</convert>
                          <convert select="@exportParams">expparam</convert>
                        </call>
                      </if>
                      if (!exporter.write(expparam))<br/>
                      {<br/>
                          <if test="@exporter='Excel'">
                            <set name="imports">jp.co.daifuku.common.CommonParam</set>
                            message.setMsgResourceKey("<valueof select="$MSG_MAX_NUMBER_OF_XLS"/>\t"<br/>
                                    + Formatter.getNumFormat(count)<br/>
                                    + "\t"<br/>
                                    + Formatter.getNumFormat(CommonParam.getIntParam("MAX_NUMBER_OF_XLS")<br/>
                                    - exporter.getHeaderRowsCount()));<br/>
                          </if>
                          break;<br/>
                      }<br/>
                  }<br/>
                  <br/>
                  <if test="@print='true'">
                    // execute print.<br/>
                    try<br/>
                    {<br/>
                      <choose>
                        <when test="@redirectExportFile='true'">
                          downloadFile = exporter.print();<br/>
                        </when>
                        <otherwise>
                          exporter.print();<br/>
                          message.setMsgResourceKey("<valueof select="$MSG_PRINT_SUCCESS"/>");<br/>
                        </otherwise>
                      </choose>
                    }<br/>
                    catch (Exception ex)<br/>
                    {<br/>
                        ex.printStackTrace();<br/>
                        message.setMsgResourceKey("<valueof select="$MSG_PRINT_FAILURE"/>");<br/>
                        return;<br/>
                    }<br/>
                    <br/>
                  </if>
                  <if test="part11">
                    <call name="part11Statement"/>
                    // commit.<br/>
                    conn.commit();<br/>
                    <br/>
                  </if>
                  <call name="clearStatement" select="clear1"/>
                  <call name="focusStatement"/>
                  <if test="@redirectExportFile='true'">
                    // redirect.<br/>
                    <valueof select="@redirectMethod"/>(downloadFile.getPath());<br/>
                    <if test="@exporter='Preview'">
                      <br/>
                      setFocus(null);<br/>
                    </if>
                  </if>
              }<br/>
              catch (Exception ex)<br/>
              {<br/>
                  ex.printStackTrace();<br/>
                  message.setMsgResourceKey(ExceptionHandler.getDisplayMessage(ex, this));<br/>
              }<br/>
              finally<br/>
              {<br/>
                  if (dasch != null)<br/>
                  {<br/>
                      dasch.close();<br/>
                  }<br/>
                  if (exporter != null)<br/>
                  {<br/>
                      exporter.close();<br/>
                  }<br/>
                  DBUtil.rollback(conn);<br/>
                  DBUtil.close(conn);<br/>
              }<br/>
          }<br/>
          <br/>
        </set>
      </otherwise>
    </choose>
  </template>

  <!-- 入出力パターン（リストセルエクスポート）-->
  <template name="processCallStatement" match="process[@pattern='ListCellExport']">
    // process call.<br/>
    <valueof select="@name"/>();<br/>
  </template>

  <template name="processStatement" match="process[@pattern='ListCellExport']">
    <set name="imports">jp.co.daifuku.foundation.da.ExporterFactory</set>
    <set name="imports" test="@print='true'">jp.co.daifuku.foundation.print.PrintExporter</set>
    <set name="imports" test="@print!='true'">jp.co.daifuku.foundation.da.Exporter</set>
    <set name="imports" test="@redirectExportFile='true'">java.io.File</set>
    <set name="imports" select="@exporterClass"/>
    <set name="imports" select="@exportParams"/>
    <set name="privateMethods">
      /**<br/>
       *<br/>
       * @throws Exception<br/>
       */<br/>
      private void <valueof select="@name"/>()<br/>
              throws Exception<br/>
      {<br/>
          <call name="validateStatement"/>
          <call name="localeStatement"/>
          Connection conn = null;<br/>
          <choose>
            <when test="@print='true'">PrintExporter exporter = null;<br/></when>
            <otherwise>Exporter exporter = null;<br/></otherwise>
          </choose>
          try<br/>
          {<br/>
              // open connection.<br/>
              conn = ConnectionManager.getRequestConnection(this);<br/>
              <br/>
              // open exporter.<br/>
              ExporterFactory factory = new <valueof select="class-name(@exporterClass)"/>(locale, ui);<br/>
              exporter = factory.<valueof select="@exporterMethod"/>("<valueof select="@exportName"/>"<if test="@exporterParameters!=''">, <valueof select="@exporterParameters"/></if>);<br/>
              <choose>
                <when test="@redirectExportFile='true'">File downloadFile = exporter.open();<br/></when>
                <otherwise>exporter.open();<br/></otherwise>
              </choose>
              <br/>
              <valiable name="listCell" select="output1//*[@column='true']/@parent"/>
              <if test="output1 and $listCell">
                // export.<br/>
                for (int i = 1; i &lt;= _lcm_<valueof select="$listCell"/>.size(); i++)<br/>
                {<br/>
                    ListCellLine line = _lcm_<valueof select="$listCell"/>.get(i);<br/>
                    <valueof select="class-name(@exportParams)"/> expparam = new <valueof select="class-name(@exportParams)"/>();<br/>
                    <if test="output1">
                      <call name="mappingStatement" select="output1">
                        <convert select="@exportParams">expparam</convert>
                        <convert select="$listCell">line</convert>
                      </call>
                    </if>
                    if (!exporter.write(expparam))<br/>
                    {<br/>
                        break;<br/>
                    }<br/>
                }<br/>
                <br/>
              </if>
              <if test="@print='true'">
                // execute print.<br/>
                try<br/>
                {<br/>
                    <choose>
                      <when test="@redirectExportFile='true'">
                        downloadFile = exporter.print();<br/>
                      </when>
                      <otherwise>
                        exporter.print();<br/>
                        message.setMsgResourceKey("<valueof select="$MSG_PRINT_SUCCESS"/>");<br/>
                      </otherwise>
                    </choose>
                }<br/>
                catch (Exception ex)<br/>
                {<br/>
                    ex.printStackTrace();<br/>
                    message.setMsgResourceKey("<valueof select="$MSG_PRINT_FAILURE"/>");<br/>
                    return;<br/>
                }<br/>
                <br/>
              </if>
              <if test="part11">
                <call name="part11Statement">
                  <valiable name="allColumns">true</valiable>
                </call>
                // commit.<br/>
                conn.commit();<br/>
                <br/>
              </if>
              <call name="clearStatement" select="clear1"/>
              <call name="focusStatement"/>
              <if test="@redirectExportFile='true'">
                // redirect.<br/>
                <valueof select="@redirectMethod"/>(downloadFile.getPath());<br/>
                  <if test="@exporter='Preview'">
                    <br/>
                    setFocus(null);<br/>
                  </if>
              </if>
          }<br/>
          catch (Exception ex)<br/>
          {<br/>
              ex.printStackTrace();<br/>
              message.setMsgResourceKey(ExceptionHandler.getDisplayMessage(ex, this));<br/>
          }<br/>
          finally<br/>
          {<br/>
              if (exporter != null)<br/>
              {<br/>
                  exporter.close();<br/>
              }<br/>
              DBUtil.rollback(conn);<br/>
              DBUtil.close(conn);<br/>
          }<br/>
      }<br/>
      <br/>
    </set>
  </template>

  <!-- 入出力パターン（クエリー）-->
  <template name="processCallStatement" match="process[@pattern='Query']">
    // process call.<br/>
    <valueof select="@name"/>();<br/>
  </template>

  <template name="processStatement" match="process[@pattern='Query']">
    <set name="imports">jp.co.daifuku.foundation.common.Params</set>
    <set name="imports" select="@sch"/>
    <set name="imports" select="@schParams"/>
    <set name="privateMethods">
        /**<br/>
         *<br/>
         * @throws Exception<br/>
         */<br/>
        private void <valueof select="@name"/>()<br/>
                throws Exception<br/>
        {<br/>
            <call name="validateStatement"/>
            <call name="localeStatement"/>
            Connection conn = null;<br/>
            <valueof select="class-name(@sch)"/> sch = null;<br/>
            try<br/>
            {<br/>
                // open connection.<br/>
                conn = ConnectionManager.getRequestConnection(this);<br/>
                sch = new <valueof select="class-name(@sch)"/>(conn, this.getClass(), locale, ui);<br/>
                <br/>
                // set input parameters.<br/>
                <valueof select="class-name(@schParams)"/> inparam = new <valueof select="class-name(@schParams)"/>();<br/>
                <if test="input1">
                  <valiable name="businessParams"><valueof select="input1//*[@type='BusinessParams']/@typeName"/></valiable>
                  <if test="$businessParams">
                    <set name="imports" select="$businessParams"/>
                    <valueof select="class-name($businessParams)"/> requestParam = new <valueof select="class-name($businessParams)"/>(request);<br/>
                  </if>
                  <call name="mappingStatement" select="input1">
                    <convert select="@schParams">inparam</convert>
                    <convert select="$businessParams">requestParam</convert>
                  </call>
                </if>
                <br/>
                // SCH call.<br/>
                List&lt;Params&gt; outparams = sch.query(inparam);<br/>
                message.setMsgResourceKey(sch.getMessage());<br/>
                <valiable name="listCell"><valueof select="output1//set[@column='true']/@parent"/></valiable>
                <if test="$listCell">
                  _lcm_<valueof select="$listCell"/>.clear();<br/>
                </if>
                <br/>
                if (outparams.size() == 0)<br/>
                {<br/>
                    <call name="clearStatement" select="clear2"/>
                    return;<br/>
                }<br/>
                <br/>
                <if test="output1">
                  // output display.<br/>
                  for (Params outparam : outparams)<br/>
                  {<br/>
                      <if test="$listCell">
                        ListCellLine line = _lcm_<valueof select="$listCell"/>.getNewLine();<br/>
                      </if>
                      <call name="mappingStatement" select="output1">
                        <convert select="@schParams">outparam</convert>
                        <convert select="$listCell">line</convert>
                      </call>
                      <if test="$listCell">
                        <valueof select="$listCell"/>_SetLineToolTip(line);<br/>
                        _lcm_<valueof select="$listCell"/>.add(line);<br/>
                      </if>
                  }<br/>
                  <br/>
                </if>
                <call name="clearStatement" select="clear1"/>
                <call name="focusStatement"/>
            }<br/>
            catch (Exception ex)<br/>
            {<br/>
                ex.printStackTrace();<br/>
                message.setMsgResourceKey(ExceptionHandler.getDisplayMessage(ex, this));<br/>
            }<br/>
            finally<br/>
            {<br/>
                DBUtil.close(conn);<br/>
            }<br/>
        }<br/>
        <br/>
    </set>
  </template>

  <!-- 入出力パターン（修正登録（ためうち）＋DASCH検索）-->
  <template name="processCallStatement" match="process[@pattern='ListCellEditDasch']">
    // process call.<br/>
    <valueof select="@name"/>();<br/>
  </template>

  <template name="processStatement" match="process[@pattern='ListCellEditDasch']">
    <set name="imports">jp.co.daifuku.foundation.common.Params</set>
    <set name="imports">jp.co.daifuku.foundation.common.ScheduleParams</set>
    <set name="imports">jp.co.daifuku.foundation.common.ScheduleParams.ProcessFlag</set>
    <set name="imports">jp.co.daifuku.bluedog.util.Formatter</set>
    <set name="imports" select="@dasch"/>
    <set name="imports" select="@daschParams"/>
    <set name="imports" select="@sch"/>
    <set name="imports" select="@schParams"/>
    <choose>

      <!-- ページャーあり セッション利用 -->
      <when test="$hasPager and $useDaschSession">
        <set name="imports">jp.co.daifuku.foundation.da.DataAccessSCH</set>
        <set name="sessionKeys" select="$pagerSessionKey"/>
        <set name="sessionKeys" select="$daschSessionKey"/>
        <set name="pagerStatements">
          if (eventSource.equals("<valueof select="@name"/>"))<br/>
          {<br/>
            // process call.<br/>
            <valueof select="@name"/>_SetList();<br/>
          }<br/>
        </set>
        <set name="privateMethods">
          <valiable name="listCell" select="input1//*[@column='true']/@parent"/>
          /**<br/>
           *<br/>
           * @throws Exception<br/>
           */<br/>
          private void <valueof select="@name"/>()<br/>
                  throws Exception<br/>
          {<br/>
              <call name="validateStatement"/>
              <call name="localeStatement"/>
              Connection conn = null;<br/>
              <valueof select="class-name(@sch)"/> sch = null;<br/>
              try<br/>
              {<br/>
                  // open connection.<br/>
                  conn = ConnectionManager.getRequestConnection(this);<br/>
                  sch = new <valueof select="class-name(@sch)"/>(conn, this.getClass(), locale, ui);<br/>
                  <br/>
                  // set input parameters.<br/>
                  List&lt;ScheduleParams&gt; inparamList = new ArrayList&lt;ScheduleParams&gt;();<br/>
                  <if test="input1 and $listCell">
                    for (int i = 1; i &lt;= _lcm_<valueof select="$listCell"/>.size(); i++)<br/>
                    {<br/>
                        // exclusion unmodified row.<br/>
                        ListCellLine line = _lcm_<valueof select="$listCell"/>.get(i);<br/>
                        if (!(line.isAppend() || line.isEdited()))<br/>
                        {<br/>
                            continue;<br/>
                        }<br/>
                        <br/>
                        <valueof select="class-name(@schParams)"/> lineparam = new <valueof select="class-name(@schParams)"/>();<br/>
                        lineparam.setProcessFlag(ProcessFlag.UPDATE);<br/>
                        lineparam.setRowIndex(i);<br/>
                        <call name="mappingStatement" select="input1">
                          <convert select="@schParams">lineparam</convert>
                          <convert select="$listCell">line</convert>
                        </call>
                        inparamList.add(lineparam);<br/>
                    }<br/>
                  </if>
                  <br/>
                  ScheduleParams[] inparams = new ScheduleParams[inparamList.size()];<br/>
                  inparamList.toArray(inparams);<br/>
                  <br/>
                  // SCH call.<br/>
                  if (!sch.startSCH(inparams))<br/>
                  {<br/>
                      // rollback.<br/>
                      conn.rollback();<br/>
                      message.setMsgResourceKey(sch.getMessage());<br/>
                      <if test="$listCell">
                        <br/>
                        // reset editing row or highlighting error row.<br/>
                        _lcm_<valueof select="$listCell"/>.resetEditRow();<br/>
                        _lcm_<valueof select="$listCell"/>.resetHighlight();<br/>
                        _lcm_<valueof select="$listCell"/>.addHighlight(sch.getErrorRowIndex(), ControlColor.Warning);<br/>
                      </if>
                      return;<br/>
                  }<br/>
                  <br/>
                  <call name="part11Statement"/>
                  // commit.<br/>
                  conn.commit();<br/>
                  message.setMsgResourceKey(sch.getMessage());<br/>
                  <br/>
                  <if test="$listCell">
                    // reset editing row.<br/>
                    _lcm_<valueof select="$listCell"/>.resetEditRow();<br/>
                    _lcm_<valueof select="$listCell"/>.resetHighlight();<br/>
                  </if>
              }<br/>
              catch (Exception ex)<br/>
              {<br/>
                  ex.printStackTrace();<br/>
                  message.setMsgResourceKey(ExceptionHandler.getDisplayMessage(ex, this));<br/>
                  return;<br/>
              }<br/>
              finally<br/>
              {<br/>
                  DBUtil.rollback(conn);<br/>
                  DBUtil.close(conn);<br/>
              }<br/>
              <br/>
              <set name="listCell" select="output1//*[@column='true']/@parent"/>
              boolean isSuccess = false;<br/>
              <valueof select="class-name(@dasch)"/> dasch = null;<br/>
              try<br/>
              {<br/>
                  // dispose DASCH.<br/>
                  disposeDasch();<br/>
                  <br/>
                  // save a pager event source.<br/>
                  viewState.setString(<valueof select="$pagerSessionKey"/>, "<valueof select="@name"/>");<br/>
                  <br/>
                  // open connection.<br/>
                  conn = ConnectionManager.getSessionConnection(this);<br/>
                  dasch = new <valueof select="class-name(@dasch)"/>(conn, this.getClass(), locale, ui);<br/>
                  dasch.setForwardOnly(false);<br/>
                  <br/>
                  // set input parameters.<br/>
                  <valueof select="class-name(@daschParams)"/> inparam = new <valueof select="class-name(@daschParams)"/>();<br/>
                  <call name="mappingStatement" select="input2">
                    <convert select="@daschParams">inparam</convert>
                  </call>
                  <br/>
                  // get count.<br/>
                  int count = dasch.count(inparam);<br/>
                  _pager.clear();<br/>
                  <if test="$listCell">
                    _lcm_<valueof select="$listCell"/>.clear();<br/>
                  </if>
                  <br/>
                  if (count == 0)<br/>
                  {<br/>
                      <call name="clearStatement" select="clear2"/>
                      return;<br/>
                  }<br/>
                  <br/>
                  // DASCH call.<br/>
                  dasch.search(inparam);<br/>
                  <br/>
                  // set list.<br/>
                  session.setAttribute(<valueof select="$daschSessionKey"/>, dasch);<br/>
                  _pager.setMax(count);<br/>
                  <valueof select="@name"/>_SetList();<br/>
                  isSuccess = true;<br/>
              }<br/>
              catch (Exception ex)<br/>
              {<br/>
                  ex.printStackTrace();<br/>
                  message.setMsgResourceKey(ExceptionHandler.getDisplayMessage(ex, this));<br/>
                  _pager.clear();<br/>
                  <if test="$listCell">
                    _lcm_<valueof select="$listCell"/>.clear();<br/>
                  </if>
              }<br/>
              finally<br/>
              {<br/>
                  if (!isSuccess)<br/>
                  {<br/>
                      if (dasch != null)<br/>
                      {<br/>
                          dasch.close();<br/>
                      }<br/>
                      DBUtil.close(conn);<br/>
                  }<br/>
              }<br/>
          }<br/>
          <br/>
        </set>
        <set name="privateMethods">
          <valiable name="listCell" select="output1//*[@column='true']/@parent"/>
          /**<br/>
           *<br/>
           * @throws Exception<br/>
           */<br/>
          private void <valueof select="@name"/>_SetList()<br/>
                  throws Exception<br/>
          {<br/>
              <valueof select="class-name(@dasch)"/> dasch = null;<br/>
              try<br/>
              {<br/>
                  // get session.<br/>
                  dasch = (<valueof select="class-name(@dasch)"/>)session.getAttribute(<valueof select="$daschSessionKey"/>);<br/>
                  <if test="$listCell">
                    _lcm_<valueof select="$listCell"/>.clear();<br/>
                  </if>
                  <br/>
                  // output display.<br/>
                  List&lt;Params&gt; outparams = dasch.get(_pager.getIndex() -1, _pager.getDataCountPerPage());<br/>
                  <if test="output1">
                    for (Params outparam : outparams)<br/>
                    {<br/>
                        <if test="$listCell">
                          ListCellLine line = _lcm_<valueof select="$listCell"/>.getNewLine();<br/>
                        </if>
                        <call name="mappingStatement" select="output1">
                          <convert select="@daschParams">outparam</convert>
                          <convert select="$listCell">line</convert>
                        </call>
                        <if test="$listCell">
                          <valueof select="$listCell"/>_SetLineToolTip(line);<br/>
                          _lcm_<valueof select="$listCell"/>.add(line);<br/>
                        </if>
                    }<br/>
                  </if>
                  <br/>
                  <call name="clearStatement" select="clear1"/>
                  <call name="focusStatement"/>
              }<br/>
              catch (Exception ex)<br/>
              {<br/>
                  ex.printStackTrace();<br/>
                  message.setMsgResourceKey(ExceptionHandler.getDisplayMessage(ex, this));<br/>
                  _pager.clear();<br/>
                  <if test="$listCell">
                    _lcm_<valueof select="$listCell"/>.clear();<br/>
                  </if>
                  disposeDasch();<br/>
              }<br/>
          }<br/>
          <br/>
        </set>
      </when>

      <!-- ページャーあり セッション利用なし -->
      <when test="$hasPager">
        <set name="sessionKeys" select="$pagerSessionKey"/>
        <set name="pagerStatements">
          if (eventSource.equals("<valueof select="@name"/>"))<br/>
          {<br/>
            // process call.<br/>
            <valueof select="@name"/>_SetList();<br/>
          }<br/>
        </set>
        <set name="privateMethods">
          <valiable name="listCell" select="input1//*[@column='true']/@parent"/>
          /**<br/>
           *<br/>
           * @throws Exception<br/>
           */<br/>
          private void <valueof select="@name"/>()<br/>
                  throws Exception<br/>
          {<br/>
              <call name="validateStatement"/>
              <call name="localeStatement"/>
              Connection conn = null;<br/>
              <valueof select="class-name(@sch)"/> sch = null;<br/>
              try<br/>
              {<br/>
                  // open connection.<br/>
                  conn = ConnectionManager.getRequestConnection(this);<br/>
                  sch = new <valueof select="class-name(@sch)"/>(conn, this.getClass(), locale, ui);<br/>
                  <br/>
                  // set input parameters.<br/>
                  List&lt;ScheduleParams&gt; inparamList = new ArrayList&lt;ScheduleParams&gt;();<br/>
                  <if test="input1 and $listCell">
                    for (int i = 1; i &lt;= _lcm_<valueof select="$listCell"/>.size(); i++)<br/>
                    {<br/>
                        // exclusion unmodified row.<br/>
                        ListCellLine line = _lcm_<valueof select="$listCell"/>.get(i);<br/>
                        if (!(line.isAppend() || line.isEdited()))<br/>
                        {<br/>
                            continue;<br/>
                        }<br/>
                        <br/>
                        <valueof select="class-name(@schParams)"/> lineparam = new <valueof select="class-name(@schParams)"/>();<br/>
                        lineparam.setProcessFlag(ProcessFlag.UPDATE);<br/>
                        lineparam.setRowIndex(i);<br/>
                        <call name="mappingStatement" select="input1">
                          <convert select="@schParams">lineparam</convert>
                          <convert select="$listCell">line</convert>
                        </call>
                        inparamList.add(lineparam);<br/>
                    }<br/>
                  </if>
                  <br/>
                  ScheduleParams[] inparams = new ScheduleParams[inparamList.size()];<br/>
                  inparamList.toArray(inparams);<br/>
                  <br/>
                  // SCH call.<br/>
                  if (!sch.startSCH(inparams))<br/>
                  {<br/>
                      // rollback.<br/>
                      conn.rollback();<br/>
                      message.setMsgResourceKey(sch.getMessage());<br/>
                      <if test="$listCell">
                        <br/>
                        // reset editing row or highlighting error row.<br/>
                        _lcm_<valueof select="$listCell"/>.resetEditRow();<br/>
                        _lcm_<valueof select="$listCell"/>.resetHighlight();<br/>
                        _lcm_<valueof select="$listCell"/>.addHighlight(sch.getErrorRowIndex(), ControlColor.Warning);<br/>
                      </if>
                      return;<br/>
                  }<br/>
                  <br/>
                  <call name="part11Statement"/>
                  // commit.<br/>
                  conn.commit();<br/>
                  message.setMsgResourceKey(sch.getMessage());<br/>
                  <br/>
                  <if test="$listCell">
                    // reset editing row.<br/>
                    _lcm_<valueof select="$listCell"/>.resetEditRow();<br/>
                    _lcm_<valueof select="$listCell"/>.resetHighlight();<br/>
                  </if>
              }<br/>
              catch (Exception ex)<br/>
              {<br/>
                  ex.printStackTrace();<br/>
                  message.setMsgResourceKey(ExceptionHandler.getDisplayMessage(ex, this));<br/>
                  return;<br/>
              }<br/>
              finally<br/>
              {<br/>
                  DBUtil.rollback(conn);<br/>
                  DBUtil.close(conn);<br/>
              }<br/>
              <br/>
              <set name="listCell" select="output1//*[@column='true']/@parent"/>
              try<br/>
              {<br/>
                  // save a pager event source.<br/>
                  viewState.setString(<valueof select="$pagerSessionKey"/>, "<valueof select="@name"/>");<br/>
                  <br/>
                  <if test="input2">
                    // criteria to retain ViewState.<br/>
                    <call name="toViewStateMappingStatement" select="input2"/>
                    <br/>
                  </if>
                  // set list.<br/>
                  _pager.clear();<br/>
                  <br/>
                  <if test="$listCell">
                    _lcm_<valueof select="$listCell"/>.clear();<br/>
                  </if>
                  <valueof select="@name"/>_SetList();<br/>
              }<br/>
              catch (Exception ex)<br/>
              {<br/>
                  ex.printStackTrace();<br/>
                  message.setMsgResourceKey(ExceptionHandler.getDisplayMessage(ex, this));<br/>
                  _pager.clear();<br/>
                  <if test="$listCell">
                    _lcm_<valueof select="$listCell"/>.clear();<br/>
                  </if>
              }<br/>
          }<br/>
          <br/>
        </set>
        <set name="privateMethods">
          <valiable name="listCell" select="output1//*[@column='true']/@parent"/>
          /**<br/>
           *<br/>
           * @throws Exception<br/>
           */<br/>
          private void <valueof select="@name"/>_SetList()<br/>
                  throws Exception<br/>
          {<br/>
              <call name="localeStatement"/>
              Connection conn = null;<br/>
              <valueof select="class-name(@dasch)"/> dasch = null;<br/>
              try<br/>
              {<br/>
                  // open connection.<br/>
                  conn = ConnectionManager.getRequestConnection(this);<br/>
                  dasch = new <valueof select="class-name(@dasch)"/>(conn, this.getClass(), locale, ui);<br/>
                  dasch.setForwardOnly(true);<br/>
                  <br/>
                  // set input parameters.<br/>
                  <valueof select="class-name(@daschParams)"/> inparam = new <valueof select="class-name(@daschParams)"/>();<br/>
                  <if test="input2">
                    <call name="fromViewStateMappingStatement" select="input2">
                      <convert select="@daschParams">inparam</convert>
                    </call>
                  </if>
                  <br/>
                  // get count.<br/>
                  int count = dasch.count(inparam);<br/>
                  _pager.setMax(count);<br/>
                  <if test="$listCell">
                    _lcm_<valueof select="$listCell"/>.clear();<br/>
                  </if>
                  <br/>
                  if (count == 0)<br/>
                  {<br/>
                      <call name="clearStatement" select="clear2"/>
                      return;<br/>
                  }<br/>
                  <br/>
                  // DASCH call.<br/>
                  dasch.search(inparam);<br/>
                  <br/>
                  // output display.<br/>
                  List&lt;Params&gt; outparams = dasch.get(_pager.getIndex() -1, _pager.getDataCountPerPage());<br/>
                  <if test="output1">
                    for (Params outparam : outparams)<br/>
                    {<br/>
                        <if test="$listCell">
                          ListCellLine line = _lcm_<valueof select="$listCell"/>.getNewLine();<br/>
                        </if>
                        <call name="mappingStatement" select="output1">
                          <convert select="@daschParams">outparam</convert>
                          <convert select="$listCell">line</convert>
                        </call>
                        <if test="$listCell">
                          <valueof select="$listCell"/>_SetLineToolTip(line);<br/>
                          _lcm_<valueof select="$listCell"/>.add(line);<br/>
                        </if>
                    }<br/>
                  </if>
                  <br/>
                  <call name="clearStatement" select="clear1"/>
                  <call name="focusStatement"/>
              }<br/>
              catch (Exception ex)<br/>
              {<br/>
                  ex.printStackTrace();<br/>
                  message.setMsgResourceKey(ExceptionHandler.getDisplayMessage(ex, this));<br/>
                  _pager.clear();<br/>
                  <if test="$listCell">
                    _lcm_<valueof select="$listCell"/>.clear();<br/>
                  </if>
              }<br/>
              finally<br/>
              {<br/>
                  if (dasch != null)<br/>
                  {<br/>
                      dasch.close();<br/>
                  }<br/>
                  DBUtil.close(conn);<br/>
              }<br/>
          }<br/>
          <br/>
        </set>
      </when>

      <!-- ページャーなし -->
      <otherwise>
        <valiable name="listCell" select="input1//*[@column='true']/@parent"/>
        <set name="privateMethods">
          /**<br/>
           *<br/>
           * @throws Exception<br/>
           */<br/>
          private void <valueof select="@name"/>()<br/>
                  throws Exception<br/>
          {<br/>
              <call name="validateStatement"/>
              <call name="localeStatement"/>
              Connection conn = null;<br/>
              <valueof select="class-name(@sch)"/> sch = null;<br/>
              <valueof select="class-name(@dasch)"/> dasch = null;<br/>
              try<br/>
              {<br/>
                  // open connection.<br/>
                  conn = ConnectionManager.getRequestConnection(this);<br/>
                  sch = new <valueof select="class-name(@sch)"/>(conn, this.getClass(), locale, ui);<br/>
                  <br/>
                  // set input parameters.<br/>
                  List&lt;ScheduleParams&gt; inparamList = new ArrayList&lt;ScheduleParams&gt;();<br/>
                  <if test="input1 and $listCell">
                    for (int i = 1; i &lt;= _lcm_<valueof select="$listCell"/>.size(); i++)<br/>
                    {<br/>
                        // exclusion unmodified row.<br/>
                        ListCellLine line = _lcm_<valueof select="$listCell"/>.get(i);<br/>
                        if (!(line.isAppend() || line.isEdited()))<br/>
                        {<br/>
                            continue;<br/>
                        }<br/>
                        <br/>
                        <valueof select="class-name(@schParams)"/> lineparam = new <valueof select="class-name(@schParams)"/>();<br/>
                        lineparam.setProcessFlag(ProcessFlag.UPDATE);<br/>
                        lineparam.setRowIndex(i);<br/>
                        <call name="mappingStatement" select="input1">
                          <convert select="@schParams">lineparam</convert>
                          <convert select="$listCell">line</convert>
                        </call>
                        inparamList.add(lineparam);<br/>
                    }<br/>
                  </if>
                  <br/>
                  ScheduleParams[] inparams = new ScheduleParams[inparamList.size()];<br/>
                  inparamList.toArray(inparams);<br/>
                  <br/>
                  // SCH call.<br/>
                  if (!sch.startSCH(inparams))<br/>
                  {<br/>
                      // rollback.<br/>
                      conn.rollback();<br/>
                      message.setMsgResourceKey(sch.getMessage());<br/>
                      <if test="$listCell">
                        <br/>
                        // reset editing row or highlighting error row.<br/>
                        _lcm_<valueof select="$listCell"/>.resetEditRow();<br/>
                        _lcm_<valueof select="$listCell"/>.resetHighlight();<br/>
                        _lcm_<valueof select="$listCell"/>.addHighlight(sch.getErrorRowIndex(), ControlColor.Warning);<br/>
                      </if>
                      return;<br/>
                  }<br/>
                  <br/>
                  <call name="part11Statement"/>
                  // commit.<br/>
                  conn.commit();<br/>
                  message.setMsgResourceKey(sch.getMessage());<br/>
                  <br/>
                  <if test="$listCell">
                    // reset editing row.<br/>
                    _lcm_<valueof select="$listCell"/>.resetEditRow();<br/>
                    _lcm_<valueof select="$listCell"/>.resetHighlight();<br/>
                    <br/>
                  </if>
                  dasch = new <valueof select="class-name(@dasch)"/>(conn, this.getClass(), locale, ui);<br/>
                  dasch.setForwardOnly(true);<br/>
                  <br/>
                  // set input parameters.<br/>
                  <valueof select="class-name(@daschParams)"/> inparam = new <valueof select="class-name(@daschParams)"/>();<br/>
                  <call name="mappingStatement" select="input2">
                    <convert select="@daschParams">inparam</convert>
                  </call>
                  <br/>
                  // get count.<br/>
                  int count = dasch.count(inparam);<br/>
                  <set name="listCell" select="output1//*[@column='true']/@parent"/>
                  <if test="$listCell">
                    _lcm_<valueof select="$listCell"/>.clear();<br/>
                  </if>
                  <br/>
                  if (count == 0)<br/>
                  {<br/>
                      <call name="clearStatement" select="clear2"/>
                      return;<br/>
                  }<br/>
                  <br/>
                  // DASCH call.<br/>
                  dasch.search(inparam);<br/>
                  <br/>
                  <if test="output1">
                    // output display.<br/>
                    while (dasch.next())<br/>
                    {<br/>
                        <valueof select="class-name(@daschParams)"/> outparam = (<valueof select="class-name(@daschParams)"/>)dasch.get();<br/>
                        <if test="$listCell">
                          ListCellLine line = _lcm_<valueof select="$listCell"/>.getNewLine();<br/>
                        </if>
                        <call name="mappingStatement" select="output1">
                          <convert select="@daschParams">outparam</convert>
                          <convert select="$listCell">line</convert>
                        </call>
                        <if test="$listCell">
                          <valueof select="$listCell"/>_SetLineToolTip(line);<br/>
                          _lcm_<valueof select="$listCell"/>.add(line);<br/>
                        </if>
                    }<br/>
                    <br/>
                  </if>
                  <call name="clearStatement" select="clear1"/>
                  <call name="focusStatement"/>
              }<br/>
              catch (Exception ex)<br/>
              {<br/>
                  ex.printStackTrace();<br/>
                  message.setMsgResourceKey(ExceptionHandler.getDisplayMessage(ex, this));<br/>
              }<br/>
              finally<br/>
              {<br/>
                  if (dasch != null)<br/>
                  {<br/>
                      dasch.close();<br/>
                  }<br/>
                  DBUtil.rollback(conn);<br/>
                  DBUtil.close(conn);<br/>
              }<br/>
          }<br/>
          <br/>
        </set>
      </otherwise>
    </choose>
  </template>

  <!-- 入出力パターン（一覧表示）-->
  <template name="processCallStatement" match="process[@pattern='PagerList']">
    // process call.<br/>
    <valueof select="@name"/>();<br/>
  </template>

  <template name="processStatement" match="process[@pattern='PagerList']">
    <set name="imports">jp.co.daifuku.foundation.common.Params</set>
    <set name="imports">jp.co.daifuku.bluedog.util.Formatter</set>
    <set name="imports" select="@dasch"/>
    <set name="imports" select="@daschParams"/>
    <choose>

      <!-- ページャーあり セッション利用 -->
      <when test="$hasPager and @isSession='true'">
        <set name="imports">jp.co.daifuku.foundation.da.DataAccessSCH</set>
        <set name="sessionKeys" select="$pagerSessionKey"/>
        <set name="sessionKeys" select="$daschSessionKey"/>
        <valiable name="listCell" select="output1//*[@column='true']/@parent"/>
        <set name="pagerStatements">
          if (eventSource.equals("<valueof select="@name"/>"))<br/>
          {<br/>
            // process call.<br/>
            <valueof select="@name"/>_SetList();<br/>
          }<br/>
        </set>
        <set name="privateMethods">
          /**<br/>
           *<br/>
           * @throws Exception<br/>
           */<br/>
          private void <valueof select="@name"/>()<br/>
                  throws Exception<br/>
          {<br/>
              <call name="validateStatement"/>
              <call name="localeStatement"/>
              Connection conn = null;<br/>
              <valueof select="class-name(@dasch)"/> dasch = null;<br/>
              boolean isSuccess = false;<br/>
              try<br/>
              {<br/>
                  // dispose DASCH.<br/>
                  disposeDasch();<br/>
                  <br/>
                  // save a pager event source.<br/>
                  viewState.setString(<valueof select="$pagerSessionKey"/>, "<valueof select="@name"/>");<br/>
                  <br/>
                  // open connection.<br/>
                  conn = ConnectionManager.getSessionConnection(this);<br/>
                  dasch = new <valueof select="class-name(@dasch)"/>(conn, this.getClass(), locale, ui);<br/>
                  dasch.setForwardOnly(false);<br/>
                  <br/>
                  // set input parameters.<br/>
                  <valueof select="class-name(@daschParams)"/> inparam = new <valueof select="class-name(@daschParams)"/>();<br/>
                  <if test="input1">
                    <valiable name="businessParams"><valueof select="input1//*[@type='BusinessParams']/@typeName"/></valiable>
                    <if test="$businessParams">
                      <set name="imports" select="$businessParams"/>
                      <valueof select="class-name($businessParams)"/> requestParam = new <valueof select="class-name($businessParams)"/>(request);<br/>
                    </if>
                    <call name="mappingStatement" select="input1">
                      <convert select="@daschParams">inparam</convert>
                      <convert select="$businessParams">requestParam</convert>
                    </call>
                  </if>
                  <br/>
                  // get count.<br/>
                  int count = dasch.count(inparam);<br/>
                  _pager.clear();<br/>
                  _pager.setMax(count);<br/>
                  <if test="$listCell">
                    _lcm_<valueof select="$listCell"/>.clear();<br/>
                  </if>
                  <br/>
                  if (count == 0)<br/>
                  {<br/>
                      <call name="clearStatement" select="clear2"/>
                      message.setMsgResourceKey("<valueof select="$MSG_LISTBOX_DATA_NOT_FOUND"/>");<br/>
                      return;<br/>
                  }<br/>
                  else if (count > _pager.getMax())<br/>
                  {<br/>
                      message.setMsgResourceKey("<valueof select="$MSG_LISTBOX_MAXNUMBER_OF_DISPLAY"/>\t" + Formatter.getNumFormat(count)<br/>
                              + "\t" + Formatter.getNumFormat(_pager.getMax()));<br/>
                  }<br/>
                  else<br/>
                  {<br/>
                      message.setMsgResourceKey("<valueof select="$MSG_LISTBOX_DISPLAY"/>\t" + Formatter.getNumFormat(count));<br/>
                  }<br/>
                  <br/>
                  // DASCH call.<br/>
                  dasch.search(inparam);<br/>
                  <br/>
                  // save session.<br/>
                  session.setAttribute(<valueof select="$daschSessionKey"/>, dasch);<br/>
                  isSuccess = true;<br/>
              }<br/>
              catch (Exception ex)<br/>
              {<br/>
                  ex.printStackTrace();<br/>
                  message.setMsgResourceKey(ExceptionHandler.getDisplayMessage(ex, this));<br/>
                  _pager.clear();<br/>
                  <if test="$listCell">
                    _lcm_<valueof select="$listCell"/>.clear();<br/>
                  </if>
              }<br/>
              finally<br/>
              {<br/>
                  if (isSuccess)<br/>
                  {<br/>
                      // set list.<br/>
                      <valueof select="@name"/>_SetList();<br/>
                  }<br/>
                  else<br/>
                  {<br/>
                      if (dasch != null)<br/>
                      {<br/>
                          dasch.close();<br/>
                      }<br/>
                      DBUtil.close(conn);<br/>
                  }<br/>
              }<br/>
          }<br/>
          <br/>
        </set>
        <set name="privateMethods">
          /**<br/>
           *<br/>
           * @throws Exception<br/>
           */<br/>
          private void <valueof select="@name"/>_SetList()<br/>
                  throws Exception<br/>
          {<br/>
              <valueof select="class-name(@dasch)"/> dasch = null;<br/>
              try<br/>
              {<br/>
                  // get session.<br/>
                  dasch = (<valueof select="class-name(@dasch)"/>)session.getAttribute(<valueof select="$daschSessionKey"/>);<br/>
                  <br/>
                  // output display.<br/>
                  List&lt;Params&gt; outparams = dasch.get(_pager.getIndex() -1, _pager.getDataCountPerPage());<br/>
                  <if test="output1">
                    <if test="$listCell">
                      _lcm_<valueof select="$listCell"/>.clear();<br/>
                    </if>
                    for (Params outparam : outparams)<br/>
                    {<br/>
                        <if test="$listCell">
                            ListCellLine line = _lcm_<valueof select="$listCell"/>.getNewLine();<br/>
                        </if>
                        <call name="mappingStatement" select="output1">
                          <convert select="@daschParams">outparam</convert>
                          <convert select="$listCell">line</convert>
                        </call>
                        <if test="$listCell">
                          <valueof select="$listCell"/>_SetLineToolTip(line);<br/>
                          _lcm_<valueof select="$listCell"/>.add(line);<br/>
                        </if>
                    }<br/>
                  </if>
                  <br/>
                  <call name="clearStatement" select="clear1"/>
                  <call name="focusStatement"/>
              }<br/>
              catch (Exception ex)<br/>
              {<br/>
                  ex.printStackTrace();<br/>
                  message.setMsgResourceKey(ExceptionHandler.getDisplayMessage(ex, this));<br/>
                  _pager.clear();<br/>
                  <if test="$listCell">
                    _lcm_<valueof select="$listCell"/>.clear();<br/>
                  </if>
                  disposeDasch();<br/>
              }<br/>
          }<br/>
          <br/>
        </set>
      </when>

      <!-- ページャーあり セッション利用なし -->
      <when test="$hasPager and @isSession!='true'">
        <set name="sessionKeys" select="$pagerSessionKey"/>
        <valiable name="listCell" select="output1//*[@column='true']/@parent"/>
        <set name="pagerStatements">
          if (eventSource.equals("<valueof select="@name"/>"))<br/>
          {<br/>
            // process call.<br/>
            <valueof select="@name"/>_SetList(false);<br/>
          }<br/>
        </set>
        <set name="privateMethods">
          /**<br/>
           *<br/>
           * @throws Exception<br/>
           */<br/>
          private void <valueof select="@name"/>()<br/>
                  throws Exception<br/>
          {<br/>
              <call name="validateStatement"/>
              <if test="input1">
                // save a pager event source.<br/>
                viewState.setString(<valueof select="$pagerSessionKey"/>, "<valueof select="@name"/>");<br/>
                <br/>
                // criteria to retain ViewState.<br/>
                <valiable name="businessParams"><valueof select="input1//*[@type='BusinessParams']/@typeName"/></valiable>
                <if test="$businessParams">
                  <set name="imports" select="$businessParams"/>
                  <valueof select="class-name($businessParams)"/> requestParam = new <valueof select="class-name($businessParams)"/>(request);<br/>
                </if>
                <call name="toViewStateMappingStatement" select="input1">
                  <convert select="$businessParams">requestParam</convert>
                </call>
                <br/>
              </if>
              // set list.<br/>
              _pager.clear();<br/>
              <valueof select="@name"/>_SetList(true);<br/>
          }<br/>
          <br/>
        </set>
        <set name="privateMethods">
          /**<br/>
           *<br/>
           * @param isFirst boolean<br/>
           * @throws Exception<br/>
           */<br/>
          private void <valueof select="@name"/>_SetList(boolean isFirst)<br/>
                  throws Exception<br/>
          {<br/>
              <call name="localeStatement"/>
              Connection conn = null;<br/>
              <valueof select="class-name(@dasch)"/> dasch = null;<br/>
              try<br/>
              {<br/>
                  // open connection.<br/>
                  conn = ConnectionManager.getRequestConnection(this);<br/>
                  dasch = new <valueof select="class-name(@dasch)"/>(conn, this.getClass(), locale, ui);<br/>
                  dasch.setForwardOnly(true);<br/>
                  <br/>
                  // set input parameters.<br/>
                  <valueof select="class-name(@daschParams)"/> inparam = new <valueof select="class-name(@daschParams)"/>();<br/>
                  <if test="input1">
                    <call name="fromViewStateMappingStatement" select="input1">
                      <convert select="@daschParams">inparam</convert>
                    </call>
                  </if>
                  <br/>
                  // get count.<br/>
                  int count = dasch.count(inparam);<br/>
                  _pager.setMax(count);<br/>
                  <if test="$listCell">
                    _lcm_<valueof select="$listCell"/>.clear();<br/>
                  </if>
                  <br/>
                  if (count == 0)<br/>
                  {<br/>
                      <call name="clearStatement" select="clear2"/>
                      message.setMsgResourceKey("<valueof select="$MSG_LISTBOX_DATA_NOT_FOUND"/>");<br/>
                      return;<br/>
                  }<br/>
                  else if (isFirst &amp;&amp; count > _pager.getMax())<br/>
                  {<br/>
                      message.setMsgResourceKey("<valueof select="$MSG_LISTBOX_MAXNUMBER_OF_DISPLAY"/>\t" + Formatter.getNumFormat(count)<br/>
                              + "\t" + Formatter.getNumFormat(_pager.getMax()));<br/>
                  }<br/>
                  else if (isFirst)<br/>
                  {<br/>
                      message.setMsgResourceKey("<valueof select="$MSG_LISTBOX_DISPLAY"/>\t" + Formatter.getNumFormat(count));<br/>
                  }<br/>
                  <br/>
                  // DASCH call.<br/>
                  dasch.search(inparam);<br/>
                  <br/>
                  // output display.<br/>
                  List&lt;Params&gt; outparams = dasch.get(_pager.getIndex() -1, _pager.getDataCountPerPage());<br/>
                  <if test="output1">
                    for (Params outparam : outparams)<br/>
                    {<br/>
                        <if test="$listCell">
                          ListCellLine line = _lcm_<valueof select="$listCell"/>.getNewLine();<br/>
                        </if>
                        <call name="mappingStatement" select="output1">
                          <convert select="@daschParams">outparam</convert>
                          <convert select="$listCell">line</convert>
                        </call>
                        <if test="$listCell">
                          <valueof select="$listCell"/>_SetLineToolTip(line);<br/>
                          _lcm_<valueof select="$listCell"/>.add(line);<br/>
                        </if>
                    }<br/>
                  </if>
                  <br/>
                  <call name="clearStatement" select="clear1"/>
                  <call name="focusStatement"/>
              }<br/>
              catch (Exception ex)<br/>
              {<br/>
                  ex.printStackTrace();<br/>
                  message.setMsgResourceKey(ExceptionHandler.getDisplayMessage(ex, this));<br/>
                  _pager.clear();<br/>
                  <if test="$listCell">
                    _lcm_<valueof select="$listCell"/>.clear();<br/>
                  </if>
              }<br/>
              finally<br/>
              {<br/>
                  if (dasch != null)<br/>
                  {<br/>
                      dasch.close();<br/>
                  }<br/>
                  DBUtil.close(conn);<br/>
              }<br/>
          }<br/>
          <br/>
        </set>
      </when>

      <!-- ページャーなし -->
      <otherwise>
        <valiable name="listCell" select="output1//*[@column='true']/@parent"/>
        <set name="privateMethods">
          /**<br/>
           *<br/>
           * @throws Exception<br/>
           */<br/>
          private void <valueof select="@name"/>()<br/>
                  throws Exception<br/>
          {<br/>
              <call name="validateStatement"/>
              <call name="localeStatement"/>
              Connection conn = null;<br/>
              <valueof select="class-name(@dasch)"/> dasch = null;<br/>
              try<br/>
              {<br/>
                  // open connection.<br/>
                  conn = ConnectionManager.getRequestConnection(this);<br/>
                  dasch = new <valueof select="class-name(@dasch)"/>(conn, this.getClass(), locale, ui);<br/>
                  dasch.setForwardOnly(true);<br/>
                  <br/>
                  // set input parameters.<br/>
                  <valueof select="class-name(@daschParams)"/> inparam = new <valueof select="class-name(@daschParams)"/>();<br/>
                  <if test="input1">
                    <valiable name="businessParams"><valueof select="input1//*[@type='BusinessParams']/@typeName"/></valiable>
                    <if test="$businessParams">
                      <set name="imports" select="$businessParams"/>
                      <valueof select="class-name($businessParams)"/> requestParam = new <valueof select="class-name($businessParams)"/>(request);<br/>
                    </if>
                    <call name="mappingStatement" select="input1">
                      <convert select="$businessParams">requestParam</convert>
                      <convert select="@daschParams">inparam</convert>
                    </call>
                  </if>
                  <br/>
                  // get count.<br/>
                  int count = dasch.count(inparam);<br/>
                  <if test="$listCell">
                    _lcm_<valueof select="$listCell"/>.clear();<br/>
                  </if>
                  <br/>
                  if (count == 0)<br/>
                  {<br/>
                      <call name="clearStatement" select="clear2"/>
                      message.setMsgResourceKey("<valueof select="$MSG_LISTBOX_DATA_NOT_FOUND"/>");<br/>
                      return;<br/>
                  }<br/>
                  else<br/>
                  {<br/>
                      message.setMsgResourceKey("<valueof select="$MSG_LISTBOX_DISPLAY"/>\t" + Formatter.getNumFormat(count));<br/>
                  }<br/>
                  <br/>
                  // DASCH call.<br/>
                  dasch.search(inparam);<br/>
                  <br/>
                  <if test="output1">
                    // output display.<br/>
                    while (dasch.next())<br/>
                    {<br/>
                        <valueof select="class-name(@daschParams)"/> outparam = (<valueof select="class-name(@daschParams)"/>)dasch.get();<br/>
                        <if test="$listCell">
                          ListCellLine line = _lcm_<valueof select="$listCell"/>.getNewLine();<br/>
                        </if>
                        <call name="mappingStatement" select="output1">
                          <convert select="@daschParams">outparam</convert>
                          <convert select="$listCell">line</convert>
                        </call>
                        <if test="$listCell">
                          <valueof select="$listCell"/>_SetLineToolTip(line);<br/>
                          _lcm_<valueof select="$listCell"/>.add(line);<br/>
                        </if>
                    }<br/>
                    <br/>
                  </if>
                  <call name="clearStatement" select="clear1"/>
                  <call name="focusStatement"/>
              }<br/>
              catch (Exception ex)<br/>
              {<br/>
                  ex.printStackTrace();<br/>
                  message.setMsgResourceKey(ExceptionHandler.getDisplayMessage(ex, this));<br/>
                  <if test="$listCell">
                    _lcm_<valueof select="$listCell"/>.clear();<br/>
                  </if>
              }<br/>
              finally<br/>
              {<br/>
                  if (dasch != null)<br/>
                  {<br/>
                      dasch.close();<br/>
                  }<br/>
                  DBUtil.close(conn);<br/>
              }<br/>
          }<br/>
          <br/>
        </set>
      </otherwise>
    </choose>
  </template>

  <!-- ロケール取得設定 -->
  <template name="localeStatement">
    // get locale.<br/>
    DfkUserInfo ui = (DfkUserInfo)getUserInfo();<br/>
    Locale locale = httpRequest.getLocale();<br/>
    <br/>
  </template>

  <!-- 入力チェック設定 -->
  <template name="validateStatement" test="validate">
    // input validation.<br/>
    <valiable name="target" select="@parent"/>
    <convert select="$target">line</convert>
    <if test="validate//validate[@controlType='ListCell' or @controlType='ScrollListCell' or @controlType='FixedListCell' or @controlType='MultiroleListCell']">
      boolean existEditedRow = false;<br/>
    </if>
    <foreach select="validate/*">
      <choose>
        <when match="validate">
          <call name="validateItemStatement"/>;<br/>
        </when>
        <when match="block">
          <if test="@type!='Else' and position()&gt;1"><br/></if>
          <call name="validateBlockStatement"/>
        </when>
      </choose>
    </foreach>
    <br/>
  </template>

  <template name="validateBlockStatement" match="block[@type='ListCell']">
    <valiable name="listCell" select="@control"/>
    <convert select="$listCell">checkline</convert>
    <valiable name="listCellValidate" test=".//validate[@control=$listCell]">true</valiable>
    <valiable name="otherValidate" test=".//validate[@control!=$listCell]">true</valiable>
    <if test="$listCellValidate">
      existEditedRow = false;<br/>
    </if>
    for (int i = 1; i &lt;= _lcm_<valueof select="$listCell"/>.size(); i++)<br/>
    {<br/>
        ListCellLine checkline = _lcm_<valueof select="$listCell"/>.get(i);<br/>
        <choose>
          <!-- リストセル単独 -->
          <when test="$listCellValidate and not($otherValidate)">
            if (checkline.isAppend() || checkline.isEdited())<br/>
            {<br/>
                existEditedRow = true;<br/>
                break;<br/>
            }<br/>
          </when>
          <!-- 複数 -->
          <otherwise>
            if (!(checkline.isAppend() || checkline.isEdited()))<br/>
            {<br/>
                continue;<br/>
            }<br/>
            <br/>
            <if test="$listCellValidate">
              existEditedRow = true;<br/>
            </if>
            <foreach select="(validate[@control!=$listCell]|block)">
              <choose>
                <when match="validate">
                  <call name="validateItemStatement"/>;<br/>
                </when>
                <when match="block">
                  <if test="@type!='Else' and position()&gt;1"><br/></if>
                  <call name="validateBlockStatement"/>
                </when>
              </choose>
            </foreach>
          </otherwise>
        </choose>
    }<br/>
    <if test="$listCellValidate">
      if (!existEditedRow)<br/>
      {<br/>
          message.setMsgResourceKey("<valueof select="$MSG_LISTCELL_NOT_SET"/>");<br/>
          return;<br/>
      }<br/>
    </if>
    <br/>
  </template>

  <template name="validateBlockStatement" match="block[@type!='ListCell']">
    <call name="blockStatement"/>
        <foreach select="(validate|block)">
          <choose>
            <when match="validate">
              <call name="validateItemStatement"/>;<br/>
            </when>
            <when match="block">
              <if test="@type!='Else' and position()&gt;1"><br/></if>
              <call name="validateBlockStatement"/>
            </when>
          </choose>
        </foreach>
    }<br/>
    <br/>
  </template>

  <!-- 入力チェック設定（項目単位） -->
  <template name="validateItemStatement" trim="true">
    <choose>
      <!-- リストセル列 -->
      <when test="@column='true'"><valueof select="@parent" convert="true"/>.validate(KEY_<valueof select="@control"/>, <valueof select="@required"/>)</when>
      <!-- TextArea -->
      <when test="@controlType='TextArea'"><valueof select="@control"/>.validate(<valueof select="@required"/>)</when>
      <!-- RadioButtonGroup -->
      <when test="@controlType='RadioButtonGroup'">
        <valiable name="name" select="@control"/>
        <valueof select="/controls/*[@type='RadioButtonGroup' and @name=$name]/*/@name"/>.validate(<valueof select="@required"/>)
      </when>
      <!-- 共通 -->
      <otherwise><valueof select="@control"/>.validate(this, <valueof select="@required"/>)</otherwise>
    </choose>
  </template>

  <!-- クリア設定 -->
  <template name="clearStatement" match="clear1|clear2">
    // clear.<br/>
    <valiable name="target" select="../@parent"/>
    <convert select="$target">line</convert>
    <foreach select="*">
      <choose>
        <when match="clear">
          <call name="clearItemStatement"/>;<br/>
        </when>
        <when match="block">
          <if test="@type!='Else' and position()&gt;1"><br/></if>
          <call name="clearBlockStatement"/>
        </when>
      </choose>
    </foreach>
    <!-- 対象リストセルの終わり-->
    <if test=".//clear[@column='true' and @parent=$target]">
      <valueof select="$target"/>_SetLineToolTip(<valueof select="$target" convert="true"/>);<br/>
      _lcm_<valueof select="$target"/>.set(row, <valueof select="$target" convert="true"/>);<br/>
    </if>
    <br/>
  </template>

  <template name="clearBlockStatement" match="block[@type='ListCell']">
    <valiable name="listCell" select="@control"/>
    <convert select="$listCell">clearLine</convert>
    for (int i = 1; i &lt;= _lcm_<valueof select="$listCell"/>.size(); i++)<br/>
    {<br/>
        ListCellLine clearLine = _lcm_<valueof select="$listCell"/>.get(i);<br/>
        <foreach select="(clear|block)">
          <choose>
            <when match="clear">
              <call name="clearItemStatement"/>;<br/>
            </when>
            <when match="block">
              <if test="@type!='Else'"><br/></if>
              <call name="clearBlockStatement"/>
            </when>
          </choose>
        </foreach>
        <if test=".//clear[@column='true' and @parent=$listCell]">
          <valueof select="$listCell"/>_SetLineToolTip(clearLine);<br/>
          _lcm_<valueof select="$listCell"/>.set(i, clearLine);<br/>
        </if>
    }<br/>
    <br/>
  </template>

  <template name="clearBlockStatement" match="block[@type!='ListCell']">
    <call name="blockStatement"/>
        <foreach select="(clear|block)">
          <choose>
            <when match="clear">
              <call name="clearItemStatement"/>;<br/>
            </when>
            <when match="block">
              <if test="@type!='Else' and position()&gt;1"><br/></if>
              <call name="clearBlockStatement"/>
            </when>
          </choose>
        </foreach>
    }<br/>
    <br/>
  </template>

  <!-- クリア設定（項目単位） -->
  <template name="clearItemStatement" trim="true">
    <choose>
      <!-- リストセル列 -->
      <when test="@column='true'">
        <choose>
          <when test="@clearType='Visible' or @clearType='Hidden'">
            <valueof select="@parent"/>.setColumnHidden(_lcm_<valueof select="@parent"/>.getColumnIndex(KEY_<valueof select="@control"/>), <valueof select="@clearType='Hidden'"/>)
          </when>
          <when test="@clearType='Checked' or @clearType='UnChecked'">
            <valueof select="@parent" convert="true"/>.setValue(KEY_<valueof select="@control"/>, <choose><when test="@clearType='Checked'">Boolean.TRUE</when><otherwise>Boolean.FALSE</otherwise></choose>)
          </when>
          <when test="@clearType='Empty'">
            <valueof select="@parent" convert="true"/>.setValue(KEY_<valueof select="@control"/>, null)
          </when>
          <when test="@clearType='Disabled' or @clearType='Enabled'">
            <valueof select="@parent" convert="true"/>.setEnabled(KEY_<valueof select="@control"/>, <valueof select="@clearType='Enabled'"/>)
          </when>
          <when test="@clearType='ReadOnly' or @clearType='ReadWrite'">
            <valueof select="@parent" convert="true"/>.setReadOnly(KEY_<valueof select="@control"/>, <valueof select="@clearType='ReadOnly'"/>)
          </when>
        </choose>
      </when>
      <!-- その他 -->
      <when test="@clearType='ReadOnly' or @clearType='ReadWrite'">
        <valueof select="@control"/>.setReadOnly(<valueof select="@clearType='ReadOnly'"/>)
      </when>
      <when test="@clearType='Enabled' or @clearType='Disabled'">
        <valueof select="@control"/>.setEnabled(<valueof select="@clearType='Enabled'"/>)
      </when>
      <when test="@clearType='Hidden' or @clearType='Visible'">
        <valueof select="@control"/>.setVisible(<valueof select="@clearType='Visible'"/>)
      </when>
      <when test="@clearType='Checked' or @clearType='UnChecked'">
        <choose>
          <when test="@controlType='CheckBox' or @controlType='RadioButton'">
            <valueof select="@control"/>.setChecked(<valueof select="@clearType='Checked'"/>)
          </when>
          <when test="@controlType='RadioButtonGroup'">
            _grp_<valueof select="@control"/>.setSelectedValue(null)
          </when>
        </choose>
      </when>
      <when test="@clearType='Empty'">
        <choose>
          <when test="@controlType='LinkedPullDown' or @controlType='PullDown'">
            _pdm_<valueof select="@control"/>.setSelectedValue(null)
          </when>
          <otherwise>
            <valueof select="@control"/>.setValue(null)
          </otherwise>
        </choose>
      </when>
      <when test="@clearType='Clear'">
        <choose>
          <when test="@controlType='ListCell' or @controlType='FixedListCell' or @controlType='ScrollListCell' or @controlType='MultiroleListCell'">
            _lcm_<valueof select="@control"/>.clear()
          </when>
          <when test="@controlType='Pager'">
            _pager.clear()
          </when>
        </choose>
      </when>
    </choose>
  </template>

  <!-- フォーカス設定 -->
  <template name="focusStatement" test="focus">
    // set focus.<br/>
    <foreach select="focus/*">
      setFocus(<valueof select="@control"/>);<br/>
    </foreach>
    <br/>
  </template>

  <!-- 入出力設定（標準） -->
  <template name="mappingStatement">
    <foreach select="(map|block)">
      <choose>
        <when match="map">
          <call name="setterStatement" select="set">
            <valiable name="get"><call name="getterStatement" select="get"><valiable name="destValueType" select="set/@valueType"/></call></valiable>
          </call>;<br/>
        </when>
        <when match="block">
          <if test="@type!='Else' and position()&gt;1"><br/></if>
          <call name="mappingBlockStatement"/>
        </when>
      </choose>
    </foreach>
  </template>

  <template name="mappingBlockStatement" match="block">
    <call name="blockStatement"/>
        <foreach select="map">
          <call name="setterStatement" select="set">
            <valiable name="get"><call name="getterStatement" select="get"><valiable name="destValueType" select="set/@valueType"/></call></valiable>
          </call>;<br/>
        </foreach>
    }<br/>
    <br/>
  </template>

  <!-- 入出力設定（設定元→ViewState） -->
  <template name="toViewStateMappingStatement">
    <foreach select="(map|block)">
      <choose>
        <when match="map">
          <valiable name="field"><call name="getViewStateKeyName" select="get"/></valiable>
          <set name="sessionKeys" select="$field"/>
          viewState.setObject(<valueof select="$field"/>, <call name="getterStatement" select="get"><valiable name="destValueType" select="set/@valueType"/></call>);<br/>
        </when>
        <when match="block">
          <if test="@type!='Else' and position()&gt;1"><br/></if>
          <call name="toViewStateMappingBlockStatement"/>
        </when>
      </choose>
    </foreach>
  </template>

  <template name="toViewStateMappingBlockStatement" match="block">
    <call name="blockStatement"/>
        <foreach select="map">
          <valiable name="field"><call name="getViewStateKeyName" select="get"/></valiable>
          <set name="sessionKeys" select="$field"/>
          viewState.setObject(<valueof select="$field"/>, <call name="getterStatement" select="get"><valiable name="destValueType" select="set/@valueType"/></call>);<br/>
        </foreach>
    }<br/>
    <br/>
  </template>

  <!-- 入出力設定（ViewState→設定先） -->
  <template name="fromViewStateMappingStatement">
    <valiable name="fields" type="HashSet"/>
    <foreach select=".//map">
      <valiable name="field"><call name="getViewStateKeyName" select="get"/></valiable>
      <if test="not($fields=$field)">
        <set name="fields" select="$field"/>
        <call name="setterStatement" select="set">
          <valiable name="get">viewState.getObject(<valueof select="$field"/>)</valiable>
        </call>;<br/>
      </if>
    </foreach>
  </template>

  <template name="getViewStateKeyName" trim="true">
    <choose>
      <when test="@type='Control'">
        <choose>
          <when test="@value='Value'">_KEY_<valueof select="upper(@typeName)"/></when>
          <otherwise>_KEY_<valueof select="upper(concat(@typeName, '_', @value))"/></otherwise>
        </choose>
      </when>
      <otherwise>_KEY_<valueof select="upper(@value)"/></otherwise>
    </choose>
  </template>

  <!-- part11出力 -->
  <template name="part11Statement" test="part11">
    <set name="imports">jp.co.daifuku.emanager.util.P11LogWriter</set>
    <set name="imports">jp.co.daifuku.foundation.common.part11.Part11List</set>
    <set name="imports">jp.co.daifuku.foundation.common.ConvertUtil</set>
    <valiable name="target" select="@parent"/>
    <valiable name="listCell" select="part11//*[@column='true']/@parent"/>
    <convert select="$listCell">line</convert>
    // write part11 log.<br/>
    <if test="$listCell and $listCell!=$target">
      for (int i = 1; i &lt;= _lcm_<valueof select="$listCell"/>.size(); i++)<br/>
      {<br/>
          ListCellLine line = _lcm_<valueof select="$listCell"/>.get(i);<br/>
          <br/>
          <if test="not($allColumns)">
            // exclusion unmodified row.<br/>
            if (!(line.isAppend() || line.isEdited()))<br/>
            {<br/>
                continue;<br/>
            }<br/>
          </if>
          <br/>
    </if>
    P11LogWriter part11Writer = new P11LogWriter(conn);<br/>
    Part11List part11List = new Part11List();<br/>
    <foreach select="part11/*">
      <choose>
        <when match="out">
          part11List.add(<call name="outputStatement" select="out1"/><if test="out2">, <call name="outputStatement" select="out2"/></if>, "<valueof select="@default"/>");<br/>
        </when>
        <when match="block">
          <if test="@type!='Else' and position()&gt;1"><br/></if>
          <call name="part11BlockStatement"/>
        </when>
      </choose>
    </foreach>
    <valiable name="operation" trim="true">
      <choose>
        <when test="part11/@operationType='Part11Operation'">
          <foreach select="split(part11/@operationTypeName, ',')">
            <set name="imports" select="."/>
          </foreach>
          <valueof select="part11/@operationValue"/>
        </when>
        <when test="part11/@operationType='ViewState'">
          <set name="imports" select="part11/@operationTypeName"/>
          viewState.getObject(<valueof select="class-name(part11/@operationTypeName)"/>.<valueof select="part11/@operationValue"/>)
        </when>
        <otherwise>0</otherwise>
      </choose>
    </valiable>
    part11Writer.createOperationLog(ui, ConvertUtil.objectToInt(<valueof select="$operation"/>), part11List);<br/>
    <if test="$listCell and $listCell!=$target">
      }<br/>
    </if>
    <br/>
  </template>

  <template name="part11BlockStatement" match="block">
    <call name="blockStatement"/>
        <foreach select="out">
          part11List.add(<call name="outputStatement" select="out1"/><if test="out2">, <call name="outputStatement" select="out2"/></if>, "<valueof select="@default"/>");<br/>
        </foreach>
    }<br/>
    <br/>
  </template>

  <!-- 条件ブロック -->
  <template name="blockStatement">
    <choose>
      <when test="@type='If'">
        <foreach select="exprs/expr">
          <if test="last()=1" trim="true">
            if (<call name="expressionStatement"/>)<br/>
            {<br/>
          </if>
          <if test="last()>1">
            <if test="position()=1" trim="true">
              if (<call name="expressionStatement"/><br/>
            </if>
            <if test="position()&gt;1 and position()&lt;last()" trim="true">
              <choose><when test="@join='And'">&amp;&amp; </when><when test="@join='Or'">|| </when></choose><call name="expressionStatement"/><br/>
            </if>
            <if test="position()=last()">
              <choose><when test="@join='And'">&amp;&amp; </when><when test="@join='Or'">|| </when></choose><call name="expressionStatement"/>)<br/>
              {<br/>
            </if>
          </if>
        </foreach>
      </when>
      <when test="@type='Else'">
        else<br/>
        {<br/>
      </when>
    </choose>
  </template>

  <!-- 条件式 -->
  <template name="expressionStatement" trim="true">
    <set name="imports">jp.co.daifuku.foundation.common.CompareUtil</set>
    <choose>
      <when test="(right/@type='String' or right/@type='Number') and right/@value=''">
        <if test="@operator='NotEqual'">!</if>CompareUtil.isEmpty(<call name="getterStatement" select="left"/>)
      </when>
      <otherwise>
        <valiable name="methodName" trim="true">
          <choose>
            <when test="@operator='Equal'">equals</when>
            <when test="@operator='NotEqual'">equals</when>
            <when test="@operator='GreaterEqual'">greaterEqual</when>
            <when test="@operator='GreaterThan'">greaterThan</when>
            <when test="@operator='LessEqual'">lessEqual</when>
            <when test="@operator='LessThan'">lessThan</when>
          </choose>
        </valiable>
        <if test="@operator='NotEqual'">!</if>CompareUtil.<valueof select="$methodName"/>(<call name="getterStatement" select="left"/>, <call name="getterStatement" select="right"/>)
      </otherwise>
    </choose>
  </template>

  <!-- 値取得 -->
  <template name="getterStatement" trim="true">
    <choose>
      <!-- コントロール -->
      <when test="@type='Control'">
        <choose>
          <!-- リストセル列 -->
          <when test="@column='true'">
            <choose>
              <when test="@value='Value'"><valueof select="@parent" convert="true"/>.getValue(KEY_<valueof select="@typeName"/>)</when>
              <when test="@value='ReadOnly'"><valueof select="@parent" convert="true"/>.getReadOnly(KEY_<valueof select="@typeName"/>)</when>
              <when test="@value='ColumnHidden'"><valueof select="@parent"/>.getColumnHidden(_lcm_<valueof select="@parent"/>.getColumnIndex(KEY_<valueof select="@typeName"/>))</when>
              <when test="@value='Enabled'"><valueof select="@parent" convert="true"/>.getEnabled(KEY_<valueof select="@typeName"/>)</when>
            </choose>
          </when>
          <!-- テキスト系 -->
          <when test="@controlType='FreeTextBox' or @controlType='DateTextBox' or @controlType='FormatTextBox' or @controlType='NumberTextBox'
                      or @controlType='TimeTextBox' or @controlType='TextArea'">
            <choose>
              <when test="@value='Value'"><valueof select="@typeName"/>.getValue()</when>
              <when test="@value='ReadOnly'"><valueof select="@typeName"/>.getReadOnly()</when>
              <when test="@value='Visible'"><valueof select="@typeName"/>.getVisible()</when>
            </choose>
          </when>
          <!-- プルダウン系 -->
          <when test="@controlType='PullDown' or @controlType='LinkedPullDown'">
            <choose>
              <when test="@value='Value'">_pdm_<valueof select="@typeName"/>.getSelectedValue()</when>
              <when test="@value='Enabled'"><valueof select="@typeName"/>.getEnabled()</when>
              <when test="@value='Visible'"><valueof select="@typeName"/>.getVisible()</when>
              <when test="@value='Text'"><valueof select="@typeName"/>.getSelectedText()</when>
            </choose>
          </when>
          <!-- ラジオボタングループ -->
          <when test="@controlType='RadioButtonGroup'">
            <choose>
              <when test="@value='Value'">_grp_<valueof select="@typeName"/>.getSelectedValue()</when>
            </choose>
          </when>
          <!-- ラジオボタン -->
          <when test="@controlType='RadioButton'">
            <choose>
              <when test="@value='Checked'"><valueof select="@typeName"/>.getChecked()</when>
              <when test="@value='Enabled'"><valueof select="@typeName"/>.getEnabled()</when>
              <when test="@value='Visible'"><valueof select="@typeName"/>.getVisible()</when>
            </choose>
          </when>
          <!-- チェックボックス -->
          <when test="@controlType='CheckBox'">
            <choose>
              <when test="@value='Value'"><valueof select="@typeName"/>.getValue()</when>
              <when test="@value='Enabled'"><valueof select="@typeName"/>.getEnabled()</when>
              <when test="@value='Visible'"><valueof select="@typeName"/>.getVisible()</when>
            </choose>
          </when>
          <!-- ラベル -->
          <when test="@controlType='Label'">
            <choose>
              <when test="@value='Value'"><valueof select="@typeName"/>.getValue()</when>
              <when test="@value='Visible'"><valueof select="@typeName"/>.getVisible()</when>
            </choose>
          </when>
          <!-- サブミットボタン -->
          <when test="@controlType='SubmitButton'">
            <choose>
              <when test="@value='Value'"><valueof select="@typeName"/>.getValue()</when>
              <when test="@value='Enabled'"><valueof select="@typeName"/>.getEnabled()</when>
              <when test="@value='Visible'"><valueof select="@typeName"/>.getVisible()</when>
            </choose>
          </when>
          <!-- リストセル系 -->
          <when test="@controlType='ListCell' or @controlType='ScrollListCell' or @controlType='MultiroleListCell' or @controlType='FixedListCell'">
            <choose>
              <when test="@value='Visible'"><valueof select="@typeName"/>.getVisible()</when>
              <when test="@value='Size'">_lcm_<valueof select="@typeName"/>.size()</when>
            </choose>
          </when>
          <!-- ページャー -->
          <when test="@controlType='Pager'">
            <choose>
              <when test="@value='Visible'"><valueof select="@typeName"/>.getVisible()</when>
            </choose>
          </when>
          <!-- サブミットラベル -->
          <when test="@controlType='SubmitLabel'">
            <choose>
              <when test="@value='Value'"><valueof select="@typeName"/>.getValue()</when>
              <when test="@value='Visible'"><valueof select="@typeName"/>.getVisible()</when>
            </choose>
          </when>
          <!-- イメージボタン -->
          <when test="@controlType='ImageButton'">
            <choose>
              <when test="@value='Visible'"><valueof select="@typeName"/>.getVisible()</when>
            </choose>
          </when>
          <!-- リストボックス -->
          <when test="@controlType='ListBox'">
            <choose>
              <when test="@value='Enabled'"><valueof select="@typeName"/>.getEnabled()</when>
              <when test="@value='Visible'"><valueof select="@typeName"/>.getVisible()</when>
            </choose>
          </when>
        </choose>
      </when>
      <!-- Params系 -->
      <when test="@type='SchParams' or @type='DaschParams' or @type='BusinessParams' or @type='ExportParams'">
        <choose>
          <when test="$destValueType='String'"><valueof select="@typeName" convert="true"/>.getString(<valueof select="class-name(@typeName)"/>.<valueof select="@value"/>)</when>
          <when test="$destValueType='Number'"><valueof select="@typeName" convert="true"/>.getInt(<valueof select="class-name(@typeName)"/>.<valueof select="@value"/>)</when>
          <when test="$destValueType='Boolean'"><valueof select="@typeName" convert="true"/>.getBoolean(<valueof select="class-name(@typeName)"/>.<valueof select="@value"/>)</when>
          <otherwise><valueof select="@typeName" convert="true"/>.get(<valueof select="class-name(@typeName)"/>.<valueof select="@value"/>)</otherwise>
        </choose>
      </when>
      <!-- ViewState -->
      <when test="@type='ViewState'">
        <set name="imports" select="@typeName"/>
        <choose>
          <when test="$destValueType='String'">viewState.getString(<valueof select="class-name(@typeName)"/>.<valueof select="@value"/>)</when>
          <when test="$destValueType='Number'">viewState.getInt(<valueof select="class-name(@typeName)"/>.<valueof select="@value"/>)</when>
          <when test="$destValueType='Boolean'">viewState.getBoolean(<valueof select="class-name(@typeName)"/>.<valueof select="@value"/>)</when>
          <otherwise>viewState.getObject(<valueof select="class-name(@typeName)"/>.<valueof select="@value"/>)</otherwise>
        </choose>
      </when>
      <!-- Constants -->
      <when test="@type='Constants'">
        <set name="imports" select="@typeName"/>
        <valueof select="class-name(@typeName)"/>.<valueof select="@value"/>
      </when>
      <!-- String -->
      <when test="@type='String'">
        "<valueof select="@value"/>"
      </when>
      <!-- Boolean -->
      <when test="@type='Boolean'">
        <valueof select="lower(@value)"/>
      </when>
      <!-- その他 -->
      <otherwise>
        <valueof select="@value"/>
      </otherwise>
    </choose>
  </template>

  <!-- 値設定 -->
  <template name="setterStatement" trim="true">
    <choose>
      <!-- コントロール -->
      <when test="@type='Control'">
        <choose>
          <!-- リストセル列 -->
          <when test="@column='true'">
            <choose>
              <when test="@value='Value'"><valueof select="@parent" convert="true"/>.setValue(KEY_<valueof select="@typeName"/>, <valueof select="$get"/>)</when>
              <when test="@value='ReadOnly'"><valueof select="@parent" convert="true"/>.setReadOnly(KEY_<valueof select="@typeName"/>, <valueof select="$get"/>)</when>
              <when test="@value='ColumnHidden'"><valueof select="@parent"/>.setColumnHidden(_lcm_<valueof select="@parent"/>.getColumnIndex(KEY_<valueof select="@typeName"/>), <valueof select="$get"/>)</when>
              <when test="@value='Enabled'"><valueof select="@parent" convert="true"/>.setEnabled(KEY_<valueof select="@typeName"/>, <valueof select="$get"/>)</when>
            </choose>
          </when>
          <!-- テキスト系 -->
          <when test="@controlType='FreeTextBox' or @controlType='DateTextBox' or @controlType='FormatTextBox' or @controlType='NumberTextBox'
                      or @controlType='TimeTextBox' or @controlType='TextArea'">
            <choose>
              <when test="@value='Value'"><valueof select="@typeName"/>.setValue(<valueof select="$get"/>)</when>
              <when test="@value='ReadOnly'"><valueof select="@typeName"/>.setReadOnly(<valueof select="$get"/>)</when>
              <when test="@value='Visible'"><valueof select="@typeName"/>.setVisible(<valueof select="$get"/>)</when>
            </choose>
          </when>
          <!-- プルダウン系 -->
          <when test="@controlType='PullDown' or @controlType='LinkedPullDown'">
            <choose>
              <when test="@value='Value'">_pdm_<valueof select="@typeName"/>.setSelectedValue(<valueof select="$get"/>)</when>
              <when test="@value='Enabled'"><valueof select="@typeName"/>.setEnabled(<valueof select="$get"/>)</when>
              <when test="@value='Visible'"><valueof select="@typeName"/>.setVisible(<valueof select="$get"/>)</when>
            </choose>
          </when>
          <!-- ラジオボタングループ -->
          <when test="@controlType='RadioButtonGroup'">
            <choose>
              <when test="@value='Value'">_grp_<valueof select="@typeName"/>.setSelectedValue(<valueof select="$get"/>)</when>
            </choose>
          </when>
          <!-- ラジオボタン -->
          <when test="@controlType='RadioButton'">
            <choose>
              <when test="@value='Checked'"><valueof select="@typeName"/>.setChecked(<valueof select="$get"/>)</when>
              <when test="@value='Enabled'"><valueof select="@typeName"/>.setEnabled(<valueof select="$get"/>)</when>
              <when test="@value='Visible'"><valueof select="@typeName"/>.setVisible(<valueof select="$get"/>)</when>
            </choose>
          </when>
          <!-- チェックボックス -->
          <when test="@controlType='CheckBox'">
            <choose>
              <when test="@value='Value'"><valueof select="@typeName"/>.setValue(<valueof select="$get"/>)</when>
              <when test="@value='Enabled'"><valueof select="@typeName"/>.setEnabled(<valueof select="$get"/>)</when>
              <when test="@value='Visible'"><valueof select="@typeName"/>.setVisible(<valueof select="$get"/>)</when>
            </choose>
          </when>
          <!-- ラベル -->
          <when test="@controlType='Label'">
            <choose>
              <when test="@value='Value'"><valueof select="@typeName"/>.setValue(<valueof select="$get"/>)</when>
              <when test="@value='Visible'"><valueof select="@typeName"/>.setVisible(<valueof select="$get"/>)</when>
            </choose>
          </when>
          <!-- サブミットボタン -->
          <when test="@controlType='SubmitButton'">
            <choose>
              <when test="@value='Value'"><valueof select="@typeName"/>.setValue(<valueof select="$get"/>)</when>
              <when test="@value='Enabled'"><valueof select="@typeName"/>.setEnabled(<valueof select="$get"/>)</when>
              <when test="@value='Visible'"><valueof select="@typeName"/>.setVisible(<valueof select="$get"/>)</when>
            </choose>
          </when>
          <!-- リストセル系 -->
          <when test="@controlType='ListCell' or @controlType='ScrollListCell' or @controlType='MultiroleListCell' or @controlType='FixedListCell'">
            <choose>
              <when test="@value='Visible'"><valueof select="@typeName"/>.setVisible(<valueof select="$get"/>)</when>
            </choose>
          </when>
          <!-- ページャー -->
          <when test="@controlType='Pager'">
            <choose>
              <when test="@value='Visible'"><valueof select="@typeName"/>.setVisible(<valueof select="$get"/>)</when>
            </choose>
          </when>
          <!-- サブミットラベル -->
          <when test="@controlType='SubmitLabel'">
            <choose>
              <when test="@value='Value'"><valueof select="@typeName"/>.setValue(<valueof select="$get"/>)</when>
              <when test="@value='Visible'"><valueof select="@typeName"/>.setVisible(<valueof select="$get"/>)</when>
            </choose>
          </when>
          <!-- イメージボタン -->
          <when test="@controlType='ImageButton'">
            <choose>
              <when test="@value='Visible'"><valueof select="@typeName"/>.setVisible(<valueof select="$get"/>)</when>
            </choose>
          </when>
          <!-- リストボックス -->
          <when test="@controlType='ListBox'">
            <choose>
              <when test="@value='Enabled'"><valueof select="@typeName"/>.setEnabled(<valueof select="$get"/>)</when>
              <when test="@value='Visible'"><valueof select="@typeName"/>.setVisible(<valueof select="$get"/>)</when>
            </choose>
          </when>
        </choose>
      </when>
      <!-- Params系 -->
      <when test="@type='SchParams' or @type='DaschParams' or @type='BusinessParams' or @type='ExportParams'">
        <valueof select="@typeName" convert="true"/>.set(<valueof select="class-name(@typeName)"/>.<valueof select="@value"/>, <valueof select="$get"/>)
      </when>
      <!-- ViewState -->
      <when test="@type='ViewState'">
        <set name="imports" select="@typeName"/>
        viewState.setObject(<valueof select="class-name(@typeName)"/>.<valueof select="@value"/>, <valueof select="$get"/>)
      </when>
    </choose>
  </template>

  <!-- part11出力 -->
  <template name="outputStatement" trim="true">
    <choose>
      <!-- コントロール -->
      <when test="@type='Control'">
        <choose>
          <!-- リストセル列 -->
          <when test="@column='true'">
            <valueof select="@parent" convert="true"/>.getViewString(KEY_<valueof select="@typeName"/>)
          </when>
          <!-- プルダウン系 -->
          <when test="@controlType='PullDown' or @controlType='LinkedPullDown'">
            _pdm_<valueof select="@typeName"/>.getSelectedStringValue()
          </when>
          <!-- ラジオボタングループ -->
          <when test="@controlType='RadioButtonGroup'">
            _grp_<valueof select="@typeName"/>.getSelectedStringValue()
          </when>
          <!-- その他 -->
          <otherwise>
            <valueof select="@typeName"/>.getStringValue()
          </otherwise>
        </choose>
      </when>
      <!-- ViewState -->
      <when test="@type='ViewState'">
        <set name="imports" select="@typeName"/>
        viewState.getString(<valueof select="class-name(@typeName)"/>.<valueof select="@value"/>)
      </when>
      <!-- Constants -->
      <when test="@type='Constants'">
        <set name="imports" select="@typeName"/>
        <valueof select="class-name(@typeName)"/>.<valueof select="@value"/>
      </when>
      <!-- String -->
      <when test="@type='String'">
        "<valueof select="@value"/>"
      </when>
      <!-- その他 -->
      <otherwise>
        <valueof select="@value"/>
      </otherwise>
    </choose>
  </template>

  <!-- フィールド -->
  <set name="fields">
    <!-- セッションキー -->
    <foreach select="$sessionKeys">
      <sort select="." order="ascending" dataType="Text"/>
      /** key */<br/>
      private static final String <valueof/> = "<valueof/>";<br/>
      <br/>
    </foreach>
    <!-- リストセル列フィールド定義 -->
    <foreach select="controls/*[@type='ListCell' or @type='ScrollListCell' or @type='FixedListCell' or @type='MultiroleListCell']">
      <set name="imports">jp.co.daifuku.bluedog.model.table.ListCellKey</set>
      <set name="imports">jp.co.daifuku.bluedog.model.table.ListCellLine</set>
      <foreach select="*">
        <choose>
          <!-- String列 -->
          <when test="@dataType='String'">
            <set name="imports">jp.co.daifuku.bluedog.model.table.StringCellColumn</set>
            /** <valueof select="../@name"/>(<valueof select="@name"/>) */<br/>
            private static final ListCellKey KEY_<valueof select="@name"/> = new ListCellKey("<valueof select="@name"/>", new StringCellColumn(), <valueof select="@type!='Hidden'"/>, <valueof select="@modify"/>);<br/>
            <br/>
          </when>
          <!-- Number列 -->
          <when test="@dataType='Number'">
            <set name="imports">jp.co.daifuku.bluedog.model.table.NumberCellColumn</set>
            /** <valueof select="../@name"/>(<valueof select="@name"/>) */<br/>
            private static final ListCellKey KEY_<valueof select="@name"/> = new ListCellKey("<valueof select="@name"/>", new NumberCellColumn(<valueof select="@format"/><if test="@default!=''">, <valueof select="@default"/></if>), <valueof select="@type!='Hidden'"/>, <valueof select="@modify"/>);<br/>
            <br/>
          </when>
          <!-- Date列 -->
          <when test="@dataType='Date'">
            <set name="imports">jp.co.daifuku.bluedog.model.table.DateCellColumn</set>
            <set name="imports">jp.co.daifuku.foundation.common.DfkDateFormat.DATE_FORMAT</set>
            <set name="imports">jp.co.daifuku.foundation.common.DfkDateFormat.TIME_FORMAT</set>
            /** <valueof select="../@name"/>(<valueof select="@name"/>) */<br/>
            private static final ListCellKey KEY_<valueof select="@name"/> = new ListCellKey("<valueof select="@name"/>", new DateCellColumn(<valueof select="@parameters"/>), <valueof select="@type!='Hidden'"/>, <valueof select="@modify"/>);<br/>
            <br/>
          </when>
          <!-- CheckBox列 -->
          <when test="@dataType='CheckBox'">
            <set name="imports">jp.co.daifuku.bluedog.model.table.CheckBoxColumn</set>
            /** <valueof select="../@name"/>(<valueof select="@name"/>) */<br/>
            private static final ListCellKey KEY_<valueof select="@name"/> = new ListCellKey("<valueof select="@name"/>", new CheckBoxColumn(), <valueof select="@type!='Hidden'"/>, <valueof select="@modify"/>);<br/>
            <br/>
          </when>
          <!-- Location列 -->
          <when test="@dataType='Location'">
            <set name="imports">jp.co.daifuku.bluedog.model.table.LocationCellColumn</set>
            /** <valueof select="../@name"/>(<valueof select="@name"/>) */<br/>
            private static final ListCellKey KEY_<valueof select="@name"/> = new ListCellKey("<valueof select="@name"/>", new LocationCellColumn(), <valueof select="@type!='Hidden'"/>, <valueof select="@modify"/>);<br/>
            <br/>
          </when>
          <!-- Area列 -->
          <when test="@dataType='Area'">
            <set name="imports">jp.co.daifuku.bluedog.model.table.AreaCellColumn</set>
            /** <valueof select="../@name"/>(<valueof select="@name"/>) */<br/>
            private static final ListCellKey KEY_<valueof select="@name"/> = new ListCellKey("<valueof select="@name"/>", new AreaCellColumn(), <valueof select="@type!='Hidden'"/>, <valueof select="@modify"/>);<br/>
            <br/>
          </when>
        </choose>
      </foreach>
    </foreach>
    <!-- リストセル列キーフィールドの生成-->
    <foreach select="controls/control[@type='ListCell' or @type='ScrollListCell' or @type='FixedListCell' or @type='MultiroleListCell']">
      /** <valueof select="@name"/> keys */<br/>
      private static final ListCellKey[] <valueof select="upper(@name)"/>_KEYS = {<br/>
        <foreach select="*">
          <sort select="@index" order="ascending" dataType="Number"/>
          KEY_<valueof select="@name"/>,<br/>
        </foreach>
      };<br/>
      <br/>
    </foreach>
  </set>

  <!-- インスタンス変数 -->
  <set name="instanceVariables">
    <valiable name="pagered">0</valiable>
    <foreach select="controls/*">
      <choose>
        <!-- プルダウンモデル -->
        <when test="@type='PullDown' or @type='LinkedPullDown'">
          <set name="imports"><valueof select="@model"/></set>
          <!-- v1.2.1.3 互換 -->
          <set name="imports">jp.co.daifuku.bluedog.model.PullDownModel</set>
          /** PullDownModel <valueof select="@name"/> */<br/>
          private <valueof select="class-name(@model)"/> _pdm_<valueof select="@name"/>;<br/>
          <br/>
        </when>
        <!-- リストセルモデル -->
        <when test="@type='ListCell' or @type='FixedListCell' or @type='ScrollListCell' or @type='MultiroleListCell'">
          <set name="imports">jp.co.daifuku.bluedog.model.table.ListCellModel</set>
          /** ListCellModel <valueof select="@name"/> */<br/>
          private ListCellModel _lcm_<valueof select="@name"/>;<br/>
          <br/>
        </when>
        <!-- ラジオボタンモデル -->
        <when test="@type='RadioButtonGroup'">
          <set name="imports">jp.co.daifuku.bluedog.model.RadioButtonGroup</set>
          <set name="imports">jp.co.daifuku.bluedog.ui.control.RadioButton</set>
          /** RadioButtonGroupModel <valueof select="@name"/> */<br/>
          private RadioButtonGroup _grp_<valueof select="@name"/>;<br/>
          <br/>
        </when>
        <!-- ページャーモデル -->
        <when test="@type='Pager' and $pagered='0'">
          <set name='pagered'>1</set>
          <set name="imports">jp.co.daifuku.bluedog.model.PagerModel</set>
          <set name="imports">jp.co.daifuku.bluedog.ui.control.Pager</set>
          /** PagerModel */<br/>
          private PagerModel _pager;<br/>
          <br/>
        </when>
      </choose>
    </foreach>
  </set>

  <!-- コンポーネントの初期化 -->
  <set name="preferenceMethods">
    /**<br/>
     *<br/>
     * @throws Exception<br/>
     */<br/>
    private void initializeComponents()<br/>
            throws Exception<br/>
    {<br/>
        <valiable name="statements" type="List"/>
        <valiable name="userInfo"/>
        <valiable name="pagered"/>
        <foreach select="controls/*">
          <choose>
            <!-- プルダウンモデルの初期化 -->
            <when test="@type='PullDown' or @type='LinkedPullDown'">
              <set name="userInfo">true</set>
              <set name="statements">
                // initialize <valueof select="@name"/>.<br/>
                _pdm_<valueof select="@name"/> = new <valueof select="class-name(@model)"/>(<valueof select="@name"/>, locale, ui);<br/>
                <if test="@type='LinkedPullDown' and @linked!=''">
                  _pdm_<valueof select="@name"/>.setParent(_pdm_<valueof select="@linked"/>);<br/>
                </if>
                <br/>
              </set>
            </when>
            <!-- リストセルモデルの初期化 -->
            <when test="@type='ListCell' or @type='ScrollListCell' or @type='FixedListCell' or @type='MultiroleListCell'">
              <set name="statements">
                // initialize <valueof select="@name"/>.<br/>
                _lcm_<valueof select="@name"/> = new ListCellModel(<valueof select="@name"/>, <valueof select="upper(@name)"/>_KEYS, locale);<br/>
                <foreach select="control[@type!='Hidden']">
                  _lcm_<valueof select="../@name"/>.setToolTipVisible(KEY_<valueof select="@name"/>, <valueof select="@toolTip"/>);<br/>
                </foreach>
                <br/>
              </set>
            </when>
            <!-- ラジオボタンモデルの初期化 -->
            <when test="@type='RadioButtonGroup'">
              <set name="statements">
                // initialize <valueof select="@name"/>.<br/>
                _grp_<valueof select="@name"/> = new RadioButtonGroup(new RadioButton[]{<valueof select="join(*/@name, ', ')"/>}, locale);<br/>
                <br/>
              </set>
            </when>
            <!-- ページャーモデルの初期化 -->
            <when test="@type='Pager' and not($pagered)">
              <set name='pagered'>true</set>
              <set name="statements">
                // initialize pager control.<br/>
                <choose>
                  <when test="$sessionKeys=$daschSessionKey">
                    _pager = new PagerModel(new Pager[]{<valueof select="join(/controls/control[@type='Pager']/@name, ', ')"/>}, locale);<br/>
                  </when>
                  <otherwise>
                    _pager = new PagerModel(new Pager[]{<valueof select="join(/controls/control[@type='Pager']/@name, ', ')"/>}, locale, PagerModel.LIMIT_UNLIMITED);<br/>
                  </otherwise>
                </choose>
                <br/>
              </set>
            </when>
          </choose>
        </foreach>
        <if test="$statements">
          // get locale.<br/>
          <if test="$userInfo">
            DfkUserInfo ui = (DfkUserInfo)getUserInfo();<br/>
          </if>
          Locale locale = httpRequest.getLocale();<br/>
          <br/>
          <foreach select="$statements"/>
        </if>
    }<br/>
    <br/>
  </set>

  <!-- プルダウンの初期化 -->
  <set name="preferenceMethods">
    /**<br/>
     *<br/>
     * @throws Exception<br/>
     */<br/>
    private void initializePulldownModels()<br/>
            throws Exception<br/>
    {<br/>
        <if test="controls/control[@type='PullDown' or @type='LinkedPullDown']">
          Connection conn = null;<br/>
          try<br/>
          {<br/>
              // open connection.<br/>
              conn = ConnectionManager.getRequestConnection(this);<br/>
              <br/>
              <foreach select="controls/control[@type='PullDown' or @type='LinkedPullDown']">
                // load <valueof select="@name"/>.<br/>
                _pdm_<valueof select="@name"/>.init(conn<if test="@modelParameters!=''">, <valueof select="@modelParameters"/></if>);<br/>
                <br/>
              </foreach>
          }<br/>
          catch (Exception ex)<br/>
          {<br/>
              ex.printStackTrace();<br/>
              message.setMsgResourceKey(ExceptionHandler.getDisplayMessage(ex, this));<br/>
          }<br/>
          finally<br/>
          {<br/>
              DBUtil.close(conn);<br/>
          }<br/>
        </if>
    }<br/>
    <br/>
  </set>

  <!-- 破棄処理 -->
  <set name="preferenceMethods">
    /**<br/>
     *<br/>
     * @throws Exception<br/>
     */<br/>
    private void dispose()<br/>
            throws Exception<br/>
    {<br/>
        <if test="$sessionKeys=$daschSessionKey">
          // dispose DASCH.<br/>
          disposeDasch();<br/>
        </if>
    }<br/>
    <br/>
  </set>

  <!-- DASCH破棄処理 -->
  <set name="preferenceMethods" test="$sessionKeys=$daschSessionKey">
    <set name="imports">jp.co.daifuku.foundation.da.DataAccessSCH</set>
    /**<br/>
     *<br/>
     * @throws Exception<br/>
     */<br/>
    private void disposeDasch()<br/>
            throws Exception<br/>
    {<br/>
        // disposing DASCH.<br/>
        DataAccessSCH dasch = (DataAccessSCH)session.getAttribute(<valueof select="$daschSessionKey"/>);<br/>
        if (dasch != null)<br/>
        {<br/>
            session.removeAttribute(<valueof select="$daschSessionKey"/>);<br/>
            dasch.close();<br/>
            DBUtil.close(dasch.getConnection());<br/>
        }<br/>
    }<br/>
    <br/>
  </set>

  <!-- リストセルツールチップ -->
  <set name="preferenceMethods">
    <foreach select="controls/*[@type='ListCell' or @type='ScrollListCell' or @type='FixedListCell' or @type='MultiroleListCell']">
      /**<br/>
       *<br/>
       * @param line ListCellLine<br/>
       * @throws Exception<br/>
       */<br/>
      private void <valueof select="@name"/>_SetLineToolTip(ListCellLine line)<br/>
              throws Exception<br/>
      {<br/>
          // set ToolTip content.<br/>
          line.setToolTip(null, null);<br/>
          <foreach select="control[@toolTipContent='true']">
            line.addToolTip("<valueof select="@resource"/>", KEY_<valueof select="@name"/>);<br/>
          </foreach>
      }<br/>
      <br/>
    </foreach>
  </set>

  <!-- ページャー設定 -->
  <set name="preferenceMethods" test="$pagerStatements">
    /**<br/>
     *<br/>
     * @throws Exception<br/>
     */<br/>
    private void pager_SetPage()<br/>
            throws Exception<br/>
    {<br/>
        // get event source.<br/>
        String eventSource = viewState.getString(<valueof select="$pagerSessionKey"/>);<br/>
        if (eventSource == null)<br/>
        {<br/>
            return;<br/>
        }<br/>
        <br/>
        // choose process.<br/>
        <foreach select="$pagerStatements">
          <if test="position()&gt;1">else </if><valueof trim="true"/>
        </foreach>
    }<br/>
    <br/>
  </set>

  <!-- 最終出力 -->
  <template enableLineBreak="true">
    // $Id$
    package <valueof select="package-name(@class)"/>;

    /*
     * Copyright(c) 2000-2010 DAIFUKU Co.,Ltd. All Rights Reserved.
     *
     * This software is the proprietary information of DAIFUKU Co.,Ltd.
     * Use is subject to license terms.
     */
    import java.sql.Connection;
    import java.util.ArrayList;
    import java.util.List;
    import java.util.Locale;

    import jp.co.daifuku.authentication.DfkUserInfo;
    import jp.co.daifuku.bluedog.sql.ConnectionManager;
    import jp.co.daifuku.bluedog.util.ControlColor;
    import jp.co.daifuku.bluedog.webapp.ActionEvent;
    import jp.co.daifuku.bluedog.webapp.DialogEvent;
    import jp.co.daifuku.bluedog.webapp.DialogParameters;
    import jp.co.daifuku.bluedog.webapp.ForwardParameters;
    import jp.co.daifuku.bluedog.webapp.ViewState;
    import jp.co.daifuku.Constants;
    import jp.co.daifuku.common.CommonException;
    import jp.co.daifuku.common.ExceptionHandler;
    import jp.co.daifuku.common.text.StringUtil;
    import jp.co.daifuku.foundation.common.DBUtil;
    import jp.co.daifuku.ui.web.BusinessClassHelper;
    import jp.co.daifuku.util.CollectionUtils;

    import jp.co.daifuku.wms.base.controller.PulldownController;
    import jp.co.daifuku.wms.base.controller.PulldownController.AreaType;
    import jp.co.daifuku.wms.base.controller.PulldownController.StationType;
    import jp.co.daifuku.wms.base.util.SessionUtil;

    <foreach select="$imports">
      <sort select="." order="ascending" dataType="Text"/>
      import <valueof />;<br/>
    </foreach>

    /**
     * Most of the business logic in this class is generated by BusiTune
     *
     * @version $Revision$, $Date$
     * @author  BusiTune.
     * @author  Last commit: $Author$
     */
    public class <valueof select="class-name(@class)"/>
            extends <valueof select="class-name(@superClass)"/>
    {

        //------------------------------------------------------------
        // fields (upper case only)
        //------------------------------------------------------------
        <foreach select="$fields"/>

        //------------------------------------------------------------
        // class variables (prefix '$')
        //------------------------------------------------------------

        //------------------------------------------------------------
        // instance variables (prefix '_')
        //------------------------------------------------------------
        <foreach select="$instanceVariables"/>

        //------------------------------------------------------------
        // constructors
        //------------------------------------------------------------
        /**
         * Default constructor
         */
        public <valueof select="class-name(@class)"/>()
        {
            super();
        }

        //------------------------------------------------------------
        // public methods
        //------------------------------------------------------------
        <foreach select="$publicMethods"/>

        /**
         * Menu button click event handling.
         *
         * @param e ActionEvent, event information
         * @throws Exception
         */
        public void btn_ToMenu_Click(ActionEvent e)
                throws Exception
        {
            // Delete Connection From Session
            SessionUtil.deleteSession(getSession());
            // Forward to Submenu screen
            forward(BusinessClassHelper.getSubMenuPath(viewState.getString(Constants.M_MENUID_KEY)));
        }

        //------------------------------------------------------------
        // accessor methods
        //------------------------------------------------------------
        <foreach select="$accesseorMethods"/>

        //------------------------------------------------------------
        // package methods
        //------------------------------------------------------------
        <foreach select="$packageMethods"/>

        //------------------------------------------------------------
        // protected methods
        //------------------------------------------------------------
        <foreach select="$protectedMethods"/>

        //------------------------------------------------------------
        // private methods
        //------------------------------------------------------------
        <foreach select="$preferenceMethods"/>
        <foreach select="$privateMethods"/>

        /**
         * Displays Screen title.
         *
         * @throws Exception
         */
        private void setTitle()
                throws Exception
        {
            // get Menu parameters from httpRequest
            String menuparam = this.getHttpRequest().getParameter(Constants.MENUPARAM);
            if (menuparam != null)
            {
                String title = CollectionUtils.getMenuParam(0, menuparam);
                String functionID = CollectionUtils.getMenuParam(1, menuparam);
                String menuID = CollectionUtils.getMenuParam(2, menuparam);

                // update Title information to view state to display when screen is refreshed
                viewState.setString(Constants.M_TITLE_KEY, title);
                viewState.setString(Constants.M_FUNCTIONID_KEY, functionID);
                viewState.setString(Constants.M_MENUID_KEY, menuID);

                lbl_SettingName.setResourceKey(title);
            }
            else if (this.getTitleResourceKey() != null &amp;&amp; !this.getTitleResourceKey().equals(""))
            {
                // If there is no title , get the title key from ResourceKey (page.xml)
                // this is used for POPUP tilte keys
                lbl_SettingName.setResourceKey(this.getTitleResourceKey());
            }
            else if (viewState.getString(Constants.M_TITLE_KEY) != null)
            {
                // Set screen title
                lbl_SettingName.setResourceKey(viewState.getString(Constants.M_TITLE_KEY));
            }
        }

        //------------------------------------------------------------
        // utility methods
        //------------------------------------------------------------
        /**
         * Returns current repository info for this class
         *
         * @return version
         */
        public static String getVersion()
        {
            return "$Id$";
        }
    }
    //end of class
  </template>

</generator>
