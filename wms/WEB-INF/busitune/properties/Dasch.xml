<?xml version="1.0" encoding="utf-8"?>
<generator>

  <!-- 変数 -->
  <valiable name="superClass">jp.co.daifuku.wms.base.report.AbstractWmsDASCH</valiable>
  <valiable name="imports" type="HashSet"/>
  <valiable name="staticImports" type="HashSet"/>

  <!-- 初期インポート -->
  <set name="imports" select="$superClass"/>
  <set name="staticImports" select="@paramsClass"/>

  <!-- 最終出力 -->
  <template enableLineBreak="true">
    // $Id$
    package <valueof select="package-name(@class)"/>;

    /*
     * Copyright(c) 2000-2010 DAIFUKU Co.,Ltd. All Rights Reserved.
     *
     * This software is the proprietary information of DAIFUKU Co.,Ltd.
     * Use is subject to license terms.
     */
    import java.sql.Connection;
    import java.sql.SQLException;
    import java.util.ArrayList;
    import java.util.List;
    import java.util.Locale;

    import jp.co.daifuku.authentication.DfkUserInfo;
    import jp.co.daifuku.common.CommonException;
    import jp.co.daifuku.common.ScheduleException;
    import jp.co.daifuku.foundation.common.Params;
    import jp.co.daifuku.wms.handler.SearchKey;
    import jp.co.daifuku.wms.handler.db.AbstractDBFinder;

    <foreach select="$staticImports">
      <sort select="." order="ascending" dataType="Text"/>
      import static <valueof />.*;<br/>
    </foreach>

    <foreach select="$imports">
      <sort select="." order="ascending" dataType="Text"/>
      import <valueof />;<br/>
    </foreach>

    /**
     * DASCH class generated by BusiTune
     *
     * @version $Revision$, $Date$
     * @author  BusiTune.
     * @author  Last commit: $Author$
     */
    public class <valueof select="class-name(@class)"/>
            extends <valueof select="class-name($superClass)"/>
    {
        //------------------------------------------------------------
        // fields (upper case only)
        //------------------------------------------------------------

        //------------------------------------------------------------
        // class variables (prefix '$')
        //------------------------------------------------------------

        //------------------------------------------------------------
        // instance variables (prefix '_')
        //------------------------------------------------------------
        
        /**
         * DB Finder
         */
        private AbstractDBFinder _finder = null;

        /**
         * current now
         */
        private int _current = -1;

        /**
         * Total number of available records
         */
        private int _total = -1;

        //------------------------------------------------------------
        // constructors
        //------------------------------------------------------------
        /**
         * Constructor to create DASCH object
         * @param conn Database Connection
         * @param parent Caller Class
         * @param locale Browser Locale
         * @param ui DfkUserInfo
         */
        public <valueof select="class-name(@class)"/>(Connection conn, Class parent, Locale locale, DfkUserInfo ui)
        {
            super(conn, parent, locale, ui);
        }

        //------------------------------------------------------------
        // public methods
        //------------------------------------------------------------
        /**
         * Fetches data from Database for given search parametres.
         * @param p Params search parametres
         * @throws CommonException
         */
        public void search(Params p)
                throws CommonException
        {
            // TODO : Implement for export
            // Create Finder Object
            _finder = new xxxFinder(getConnection());
            // Initialize record counts
            _finder.open(isForwardOnly());
            // Create Search Key and search for Records
            _finder.search(createSearchKey(p, true));

            _current = -1;
        }

        /**
         * Returns true if next DB entity is available
         * @return returns true if next DB entity is available. else false
         * @throws CommonException
         */
        public boolean next()
                throws CommonException
        {
            _current++;
            return _total > _current;
        }

        /**
         * Returns next DB entity
         * @return DB entity as Param object
         * @throws CommonException
         */
        public Params get()
                throws CommonException
        {
            // TODO : Implement for export
            //throw new ScheduleException("This method is not implemented.");
            // get Next entity from finder class
            eneityName[] ents = (eneityName[])_finder.getEntities(1);
            Params p = new Params();
            // conver Entity to Param object
            for (eneityName ent : ents)
            {
                p.set(DFK_DS_NO, getDsNumber());
                p.set(DFK_USER_ID, getUserId());
                p.set(DFK_USER_NAME, getUserName());
                p.set(SYS_DAY, getPrintDate());
                p.set(SYS_TIME, getPrintDate());

                p.set(PLAN_DATE, WmsFormatter.toDate(ent.getPlanDay()));
                p.set(ITEM_CODE, ent.getItemCode());
                p.set(ITEM_NAME, ent.getValue(Item.ITEM_NAME));
                p.set(AREA_NO, ent.getPlanAreaNo());
                p.set(PLAN_LOCATION_NO, ent.getPlanLocationNo());
                p.set(PLAN_CASE_QTY,
                        DisplayUtil.getCaseQty(ent.getPlanQty(), ent.getBigDecimal(Item.ENTERING_QTY).intValue()));
                p.set(PLAN_PIECE_QTY, DisplayUtil.getPieceQty(ent.getPlanQty(),
                        ent.getBigDecimal(Item.ENTERING_QTY).intValue()));
                p.set(WORK_STATUS, DisplayResource.getWorkingStatus(ent.getStatusFlag()));
                break;
            }
            // return Pram objstc
            return p;
        }

        /**
         * 
         * finder,Connection close
         */
        public void close()
        {
            if (_finder != null)
            {
                _finder.close();
            }
            super.close();
        }

        //------------------------------------------------------------
        // accessor methods
        //------------------------------------------------------------

        //------------------------------------------------------------
        // package methods
        //------------------------------------------------------------

        //------------------------------------------------------------
        // protected methods
        //------------------------------------------------------------
        /**
         * Returns number of available entities for given search conditions
         * @param p Params , search parameters
         * @return count , number of available entities
         * @throws CommonException
         */
        protected int actualCount(Params p)
                throws CommonException
        {
            // TODO : Implement for export or listcell
            xxxHandler handler = new xxxHandler(getConnection());

            // find count
            _total = handler.count(createSearchKey(p, false));

            return _total;
        }

        /**
         * Returns DB entities for given range
         * @param start , start
         * @param cnt, end
         * @return List, Returns the entities as List
         */
        protected List&lt;Params&gt; rangeGet(int start, int cnt)
                throws CommonException
        {
            // TODO : Implement for listcell
            //throw new RuntimeException("This method is not implemented.");
            List&lt;Params&gt; params = new ArrayList&lt;Params&gt;();
            eneityName[] ents = (eneityName[])_finder.getEntities(start, start + cnt);

            for (eneityName ent : ents)
            {
                Params p = new Params();
                p.set(BATCH, ent.getBatchNo());
                p.set(ORDER, ent.getOrderNo());
                p.set(CUSTOMER_CODE, ent.getCustomerCode());
                p.set(CUSTOMER_NAME, ent.getValue(Customer.CUSTOMER_NAME));

                params.add(p);
            }
            return params;
        }

        //------------------------------------------------------------
        // private methods
        //------------------------------------------------------------
        /**
         * Sets the search conditions.
         * @param param A parameter including the search conditions.
         * @param isSet Sets false to confirm the number and sets true to get the data to output.
         * @return SearchKey SearchKey
         * @throws CommonException Reports all exceptions of the User definition.
         */
        private SearchKey createSearchKey(Params param, boolean isSet)
                throws CommonException
        {
            xxxSearchKey key = new xxxSearchKey();

            // Sets the search conditions and group.
            // where, group by

            if (isSet)
            {
                // Writes OrderBy and collect items.
            }

            return key;
        }

        //------------------------------------------------------------
        // utility methods
        //------------------------------------------------------------
        /**
         * Returns current repository info for this class
         * @return version
         */
        public static String getVersion()
        {
            return "$Id$";
        }
    }
    //end of class
  </template>

</generator>
